* Personal Informations

#+BEGIN_SRC emacs-lisp
  (setq-default user-full-name "Julien Chedal-Anglay"
                user-mail-address "chedala.julien@gmail.com")
#+END_SRC

* Encoding

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq-default use-package-always-ensure t)
#+END_SRC

* Functions
** Dependencies

#+BEGIN_SRC emacs-lisp
  (use-package popwin)
  (use-package multi-term
    :custom
    (multi-term-program "/bin/zsh"))
#+END_SRC

** Definitions

#+BEGIN_SRC emacs-lisp
   (defun ign/split-window-right ()
     (interactive)
     (split-window-right)
     (balance-windows))

   (defun ign/split-window-below ()
     (interactive)
     (split-window-below)
     (balance-windows))

   (defun ign/delete-window ()
     (interactive)
     (delete-window)
     (balance-windows))

   (defun ign/popwin-term (name)
     (popwin:display-buffer-1
      (or (get-buffer name)
          (save-window-excursion
            (multi-term)))
      :default-config-keywords '(:height 15 :position :bottom :noselect nil :stick t))
     (rename-buffer name))

   (cl-defun ign/term-toggle (&optional (name "*term*"))
     (interactive)
     (cond
      ((get-buffer-window name) (kill-buffer name))
      ((get-buffer name) (progn (kill-buffer name) (ign/term-toggle)))
      (t (ign/popwin-term name))))

   (defun ign/fill-or-unfill ()
     (interactive)
     (let ((fill-column
            (if (eq last-command 'ign/fill-or-unfill)
                (progn (setq this-command nil)
                       (point-max))
              fill-column)))
       (call-interactively #'fill-paragraph)))

   (defun ign/refresh-buffer ()
     (interactive)
     (revert-buffer :ignore-auto :noconfirm))

   (defun ign/sh-run-safe (command &rest args)
     (if (executable-find command)
         (shell-command (string-join (nconc (list command) args) " "))
       (message (concat "'" command "' not found found; please install"))))

   (defun ign/reload ()
     (interactive)
     (load-file (concat user-emacs-directory "init.el")))

   (defun ign/toggle-mark ()
     (interactive)
     (if (region-active-p)
         (deactivate-mark)
       (push-mark nil nil t)))

   (defun ign/toggle-mark-rectangle ()
     (interactive)
     (if (region-active-p)
         (deactivate-mark)
       (rectangle-mark-mode)))

  (defun ign/first-occurence (f list)
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall f head))
          head
        (ign/first-occurence f tail))))

  (defmacro ign/find-executables (list)
    (ign/first-occurence #'executable-find list))
#+END_SRC

* Custom Variables

#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst ign/is-a-mac (memq window-system '(mac ns)))
  (defconst ign/python-executable (ign/find-executables ("python3.5" "python3.7" "python3")))
  (defconst ign/ipython-executable (ign/find-executables ("ipython3" "ipython")))
#+END_SRC

* System
** MacOS

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if ign/is-a-mac
    :demand t
    :config
    (exec-path-from-shell-initialize))

  (when (memq window-system '(mac ns))
    (setq mac-command-modifier 'meta))
#+END_SRC

** Version-specific

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font (if ign/is-a-mac "Menlo-14" "SourceCodePro-10") nil t)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if (display-graphic-p)
    :config
    (doom-themes-org-config)
    (load-theme 'doom-vibrant t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-python-executable ign/python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    :config
    (doom-modeline-mode))
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'hbar)
  (setq-default cursor-in-non-selected-windows nil)
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title
     (format "[Emacs ready in %.2f seconds with %d packages loaded and %d garbage collections.]"
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (global-hl-line-mode t))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

* Completion Frontend

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand t
    :bind
    ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package counsel
    :bind
    (([remap execute-extended-command] . counsel-M-x)
     ([remap find-file] . counsel-find-file)))

  (use-package swiper
    :bind
    ([isearch-backward] . swiper-isearch)
    ([isearch] . swiper))

  (use-package all-the-icons-ivy
    :after ivy
    :config
    (setq-default all-the-icons-ivy-file-commands (append all-the-icons-ivy-file-commands '(counsel-projectile-find-file counsel-projectile-find-file-dwim)))
    (all-the-icons-ivy-setup))

  (use-package ivy-xref
    :demand t
    :after ivy
    :custom
    (xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.\\(org\\|ORG\\)\\'" . org-mode)
    :ensure nil
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    :config
    (use-package ob-ipython)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (js . t)
       (ocaml . t)
       (gnuplot . t))))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)
#+END_SRC

* Programming Related

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :custom
    (aggressive-indent-comments-too t)
    (aggressive-indent-dont-indent-if t)
    :hook
    (prog-mode . aggressive-indent-mode))

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-c g" . magit-status))

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :custom
    (password-cache-expiry nil)
    :config
    (add-to-list 'tramp-methods
                 '("gssh"
                   (tramp-login-program "gcloud compute ssh")
                   (tramp-login-args (("%h")))
                   (tramp-async-args (("-q")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                                   ("-o" "UserKnownHostsFile=/dev/null")
                                   ("-o" "StrictHostKeyChecking=no")))
                   (tramp-default-port 22))))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :demand t
    :bind
    ("M-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-tooltip-mouse ((t (:background "#30343c"))))
    (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-preview ((t (:background "#30343c"))))
    (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-scrollbar-fg ((t (:background "#30343c"))))
    (company-scrollbar-bg ((t (:background "#30343c"))))
    (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    :config
    (global-company-mode t))

  (use-package company-quickhelp
    :demand t
    :after company
    :config
    (company-quickhelp-mode))
#+END_SRC

** Checkers/Linters

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :preface
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      [#b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b11100111
       #b11100111
       #b11100111
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000])
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    :custom
    (flycheck-python-pylint-executable ign/python-executable)
    (flycheck-python-pycompile-executable ign/python-executable)
    (flycheck-python-flake8-executable ign/python-executable)
    (flycheck-python-mypy-executable ign/python-executable)
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :config
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info
      :info-list-face 'flycheck-error-list-info)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning
      :warning-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (global-flycheck-mode t))
#+END_SRC

** Project

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    :custom
    (projectile-project-search-path '("~/Projects/"))
    (projectile-indexing-method 'hybrid)
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t)
    (counsel-projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (defvar ign/python-font-lock-keywords
    ;; Keywords
    `(,(rx symbol-start
           (or
            "and" "del" "from" "not" "while" "as" "elif" "global" "or" "with"
            "assert" "else" "if" "pass" "yield" "break" "except" "import" "class"
            "in" "raise" "continue" "finally" "is" "return" "def" "for" "lambda"
            "try"
            ;; Python 3:
            ;; False, None, and True are listed as keywords on the Python 3
            ;; documentation, but since they also qualify as constants they are
            ;; fontified like that in order to keep font-lock consistent between
            ;; Python versions.
            "nonlocal"
            ;; Python 3.5+ PEP492
            (and "async" (+ space) (or "def" "for" "with"))
            "await"
            ;; Extra:
            "self" "other" "cls")
           symbol-end)
      ;; functions
      (,(rx symbol-start "def" (1+ space) (group (1+ (or word ?_))))
       (1 font-lock-function-name-face))
      ;; classes
      (,(rx symbol-start "class" (1+ space) (group (1+ (or word ?_))))
       (1 font-lock-type-face))
      ;; Constants
      (,(rx symbol-start
            (or
             "Ellipsis" "False" "None" "NotImplemented" "True" "__debug__"
             ;; copyright, license, credits, quit and exit are added by the site
             ;; module and they are not intended to be used in programs
             "copyright" "credits" "exit" "license" "quit")
            symbol-end) . font-lock-constant-face)
      ;; Decorators.
      (,(rx line-start (* (any " \t")) (group "@" (1+ (or word ?_))
                                              (0+ "." (1+ (or word ?_)))))
       (1 font-lock-type-face))
      ;; Builtin Exceptions
      (,(rx symbol-start
            (or
             ;; Python 2 and 3:
             "ArithmeticError" "AssertionError" "AttributeError" "BaseException"
             "BufferError" "BytesWarning" "DeprecationWarning" "EOFError"
             "EnvironmentError" "Exception" "FloatingPointError" "FutureWarning"
             "GeneratorExit" "IOError" "ImportError" "ImportWarning"
             "IndentationError" "IndexError" "KeyError" "KeyboardInterrupt"
             "LookupError" "MemoryError" "NameError" "NotImplementedError"
             "OSError" "OverflowError" "PendingDeprecationWarning"
             "ReferenceError" "RuntimeError" "RuntimeWarning" "StopIteration"
             "SyntaxError" "SyntaxWarning" "SystemError" "SystemExit" "TabError"
             "TypeError" "UnboundLocalError" "UnicodeDecodeError"
             "UnicodeEncodeError" "UnicodeError" "UnicodeTranslateError"
             "UnicodeWarning" "UserWarning" "ValueError" "Warning"
             "ZeroDivisionError"

             ;; Python 3:
             "BlockingIOError" "BrokenPipeError" "ChildProcessError"
             "ConnectionAbortedError" "ConnectionError" "ConnectionRefusedError"
             "ConnectionResetError" "FileExistsError" "FileNotFoundError"
             "InterruptedError" "IsADirectoryError" "NotADirectoryError"
             "PermissionError" "ProcessLookupError" "RecursionError"
             "ResourceWarning" "StopAsyncIteration" "TimeoutError"
             ;; OS specific
             "VMSError" "WindowsError"
             )
             symbol-end) . font-lock-type-face)
      ;; Builtin functions
      (,(rx symbol-start
            (or
             "bool" "complex" "dict" "float" "frozenset" "int"
             "list" "memoryview" "object" "set" "str" "tuple"
             "type" "abs" "all" "any" "bin" "callable" "chr"
             "compile" "delattr" "dir" "divmod" "enumerate"
             "eval" "filter" "format" "getattr" "globals"
             "hasattr" "hash" "help" "hex" "id" "input" "isinstance"
             "issubclass" "iter" "len" "locals" "map" "max"
             "min" "next" "oct" "open" "ord" "pow" "print" "property"
             "range" "repr" "reversed" "round" "setattr" "slice" "sorted"
             "staticmethod" "sum" "super" "vars" "zip" "classmethod"
             "__import__"
             ;; Python 3:
             "ascii" "bytearray" "bytes" "exec"
             ;; Extra:
             "__all__" "__doc__" "__name__" "__package__")
            symbol-end) . font-lock-builtin-face)
      ;; Convention for classes
      (,(rx symbol-start
            upper-case
            (* wordchar)
            symbol-end) . font-lock-type-face)
      ;; assignments
      ;; support for a = b = c = 5
      (,(lambda (limit)
          (let ((re (python-rx (group (+ (any word ?. ?_)))
                               (? ?\[ (+ (not (any  ?\]))) ?\]) (* space)
                               assignment-operator))
                (res nil))
            (while (and (setq res (re-search-forward re limit t))
                        (or (python-syntax-context 'paren)
                            (equal (char-after (point)) ?=))))
            res))
       (1 font-lock-variable-name-face nil nil))
      ;; support for a, b, c = (1, 2, 3)
      (,(lambda (limit)
          (let ((re (python-rx (group (+ (any word ?. ?_))) (* space)
                               (* ?, (* space) (+ (any word ?. ?_)) (* space))
                               ?, (* space) (+ (any word ?. ?_)) (* space)
                               assignment-operator))
                (res nil))
            (while (and (setq res (re-search-forward re limit t))
                        (goto-char (match-end 1))
                        (python-syntax-context 'paren)))
            res))
       (1 font-lock-variable-name-face nil nil))))

  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package sphinx-doc
    :hook
    (python-mode . sphinx-doc-mode))

  (use-package python
    :ensure nil
    :after flycheck
    :mode
    ("\\.py[iw]?\\'" . python-mode)
    :custom
    (python-indent 4)
    (python-shell-interpreter ign/ipython-executable)
    (python-shell-interpreter-args "--simple-prompt -i")
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat ign/python-executable " -m gdb"))
    (py-split-window-on-execute t)
    (python-font-lock-keywords #'ign/python-font-lock-keywords))

  (use-package elpy
    :after company
    :hook
    (python-mode . elpy-mode)
    :custom
    (elpy-rpc-python-command ign/python-executable)
    :config
    (delete 'elpy-module-highlight-indentation elpy-modules)
    (delete 'elpy-module-flymake elpy-modules)
    (delete 'elpy-module-company elpy-modules)
    (add-to-list 'company-backends #'elpy-company-backend)
    (elpy-enable))
#+END_SRC

*** Jupyter

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :demand t
    :after company
    :mode
    (("\\.ml[ip]?\\'" . tuareg-mode)
     ("\\.mly\\'" . tuareg-menhir-mode)
     ("[./]opam_?\\'" . tuareg-opam-mode)
     ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
     ("\\.eliomi?\\'" . tuareg-mode))
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t))

  (use-package merlin
    :if (file-exists-p "~/.emacs.d/opam-user-setup.el")
    :after tuareg
    :hook
    (tuareg-mode . merlin-mode)
    :config
    (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el"))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :custom
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package company-c-headers
    :demand t
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :mode
    (("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode)
     ("\\.cljs\\'" . clojurescript-mode)
     ("\\.cljc\\'" . clojurec-mode))
    :custom
    (cider-repl-pop-to-buffer-on-connect nil)
    (cider-repl-display-in-current-window nil)
    (cider-font-lock-dynamically t))

  (use-package elein)
#+END_SRC

** GNUplot

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)
  (use-package gnuplot-mode
    :mode
    ("\\.gp\\'" "\\.gnuplot\\'"))
#+END_SRC

** CSV

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "\\.[Cc][Ss][Vv]\\'")
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)

  (global-set-key [remap fill-paragraph] #'ign/fill-or-unfill)

  (use-package expand-region)
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind
    ("C-'" . avy-goto-char-2)
    :custom
    (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))

  (use-package imenu-list
    :bind
    ("C-x C-j" . imenu-list-smart-toggle)
    :custom
    (imenu-list-auto-resize t)
    (imenu-auto-rescan t))
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key key-translation-map (kbd "M-x") (kbd "M-t"))

  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

  (use-package bind-key)
  (bind-key* "C-x k" 'delete-window)
  (bind-key* "C-x w" 'split-window-right)
  (bind-key* "C-x t" 'ign/term-toggle)
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :bind
    ("C-SPC" . hydra-mark/body)
    ("C-h" . hydra-help/body))

  (defhydra hydra-help (:color blue)
    ("q" nil "Quit")
    ("b" which-key-show-top-level "Top level" :column "Bindings")
    ("m" which-key-show-major-mode "Major mode")
    ("f" counsel-describe-function "Function" :column "Describes")
    ("v" counsel-describe-variable "Variable")
    ("l" view-lossage "Command history" :column "Others"))

  (defhydra hydra-mark (:color red)
    ("q" nil "Quit")
    ("b" backward-char "Left" :column "Movements")
    ("f" forward-char "Right")
    ("n" next-line "Down")
    ("p" previous-line "Up")
    ("a" beginning-of-line "BOL")
    ("e" end-of-line "EOL")
    ("SPC" er/expand-region "Expand" :column "Selection")
    ("." ign/toggle-mark "Mark")
    ("," ign/toggle-mark-rectangle "Mark Rectangle")
    ("t" string-rectangle "Insert Rectangle" :column "Actions")
    ("d" delete-region "Delete")
    ("g" keyboard-quit "Stop")
    ("k" kill-region "Kill")
    ("l" recenter-top-bottom "Center")
    ("u" undo "Undo")
    ("w" kill-ring-save "Save")
    ("y" yank "Yank")
    (";" comment-dwim "Comment"))
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

* Community
** Browser

#+BEGIN_SRC emacs-lisp
  (setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :config
    (elcord-mode))
#+END_SRC
