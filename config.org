* Personal Informations

#+BEGIN_SRC emacs-lisp
(setq-default user-full-name "Julien Chedal-Anglay"
              user-mail-address "chedala.julien@gmail.com")
#+END_SRC

* Encoding

#+BEGIN_SRC emacs-lisp
(setq-default locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
(setq-default backup-inhibited t
              auto-save-default nil
              create-lockfiles nil
              make-backup-files nil)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq-default use-package-always-ensure t)
#+END_SRC

* Custom Variables

#+BEGIN_SRC emacs-lisp
(defconst custom-file "/dev/zero")
(defconst ign:python-executable "python3")
(defconst ign:ipython-executable "ipython3")
#+END_SRC

* System
** MacOS

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :demand t
  :config
  (exec-path-from-shell-initialize))

(when (memq window-system '(mac ns))
  (setq mac-command-modifier 'meta))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
(set-frame-font (if (memq window-system '(mac ns)) "Menlo-14" "SourceCodePro-10") nil t)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :if (display-graphic-p)
  :config
  (doom-themes-org-config)
  (load-theme 'doom-vibrant t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)

(use-package doom-modeline
  :if (display-graphic-p)
  :custom
  (doom-modeline-python-executable ign:python-executable)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-version t)
  :config
  (doom-modeline-mode))
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'hbar)
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

* Functions
** Dependencies

#+BEGIN_SRC emacs-lisp
(use-package popwin)
(use-package multi-term
  :custom
  (multi-term-program "/bin/zsh"))
#+END_SRC

** Definitions

#+BEGIN_SRC emacs-lisp
(defun ign:split-window-right ()
  (interactive)
  (split-window-right)
  (balance-windows))

(defun ign:split-window-below ()
  (interactive)
  (split-window-below)
  (balance-windows))

(defun ign:delete-window ()
  (interactive)
  (delete-window)
  (balance-windows))

(defun ign:popwin-term (name)
  (popwin:display-buffer-1
   (or (get-buffer name)
       (save-window-excursion
         (multi-term)))
   :default-config-keywords '(:height 15 :position :bottom :noselect nil :stick t))
   (rename-buffer name))

(cl-defun ign:term-toggle (&optional (name "*term*"))
  (interactive)
  (cond
   ((get-buffer-window name) (kill-buffer name))
   ((get-buffer name) (progn (kill-buffer name) (ign:term-toggle)))
   (t (ign:popwin-term name))))

(defun ign:fill-or-unfill ()
  (interactive)
  (let ((fill-column
         (if (eq last-command 'ign:fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(defun ign:refresh-buffer ()
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))

(defun ign:sh-run-safe (command &rest args)
  (if (executable-find command)
      (shell-command (string-join (nconc (list command) args) " "))
     (message (concat "'" command "' not found found; please install"))))

(defun ign:reload ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-banner-logo-title
    (format "[Emacs ready in %.2f seconds with %d garbage collections.]"
            (float-time (time-subtract after-init-time before-init-time)) gcs-done))
  (dashboard-startup-banner 'logo)
  (dashboard-items '((recents  . 5)
                     (bookmarks . 5)
                     (projects . 5)
                     (registers . 5)))
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
(setq-default transient-mark-mode t
              visual-line-mode t
              indent-tabs-mode nil
              tab-width 4)

(when (display-graphic-p)
  (global-hl-line-mode t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
(setq-default scroll-margin 0
              scroll-conservatively 10000
              scroll-preserve-screen-position t
              mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p (lambda (&rest _) t))
(setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
(setq-default visible-bell nil
              audible-bell nil
              ring-bell-function 'ignore)
#+END_SRC

* Completion Frontend

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind
  ("C-x b" . ivy-switch-buffer)
  (:map ivy-minibuffer-map
   ("<return>" . ivy-alt-done))
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  (ivy-height 20)
  (ivy-display-style 'fancy)
  (ivy-format-function 'ivy-format-function-line)
  (ivy-re-builders-alist
      '((t . ivy--regex-plus)))
  (ivy-initial-inputs-alist nil))

(use-package counsel
  :bind
  (("M-x" . counsel-M-x)
   ("C-c C-j" . counsel-imenu)
   ("C-x C-f" . counsel-find-file)
   ("C-h v" . counsel-describe-variable)
   ("C-h f" . counsel-describe-function)))

(use-package swiper
  :bind
  ("C-r" . swiper-isearch)
  ("C-s" . swiper))

(use-package all-the-icons-ivy
  :after ivy
  :config
  (setq-default all-the-icons-ivy-file-commands (append all-the-icons-ivy-file-commands '(counsel-projectile-find-file counsel-projectile-find-file-dwim)))
  (all-the-icons-ivy-setup))

(use-package ivy-xref
  :demand t
  :after ivy
  :custom
  (xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :hook
  (org-babel-after-execute . org-redisplay-inline-images)
  :custom
  (org-image-actual-width 480)
  (org-src-fontify-natively t)
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-startup-with-inline-images t)
  (org-babel-python-command "ipython3 -i --simple-prompt")
  (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
  :config
  (use-package ob-ipython)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ipython . t)
     (js . t)
     (ocaml . t)
     (gnuplot . t))))

(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode))

(use-package px)
#+END_SRC

* Programming

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1))

(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :hook
  (prog-mode . smartparens-mode)
  :custom
  (sp-escape-quotes-after-insert nil)
  :config
  (require 'smartparens-config))

(show-paren-mode t)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-c g" . magit-status))

(use-package gitignore-mode
  :mode ("\\.gitignore\\'" . gitignore-mode))
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :config
  (add-to-list 'tramp-methods
    '("gssh"
      (tramp-login-program "gcloud compute ssh")
      (tramp-login-args (("%h")))
      (tramp-async-args (("-q")))
      (tramp-remote-shell "/bin/sh")
      (tramp-remote-shell-args ("-c"))
      (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                      ("-o" "UserKnownHostsFile=/dev/null")
                      ("-o" "StrictHostKeyChecking=no")))
      (tramp-default-port 22))))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
(use-package company
  :demand t
  :bind
  ("M-/" . company-complete)
  (:map company-active-map
   ("M-n" . nil)
   ("M-p" . nil)
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous))
  :custom-face
  (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
  (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
  (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
  (company-tooltip-mouse ((t (:background "#30343c"))))
  (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
  (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
  (company-preview ((t (:background "#30343c"))))
  (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
  (company-scrollbar-fg ((t (:background "#30343c"))))
  (company-scrollbar-bg ((t (:background "#30343c"))))
  (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
  :custom
  (company-require-match 'never)
  (company-dabbrev-downcase nil)
  (company-tooltip-align-annotations t)
  (company-idle-delay 128)
  (company-minimum-prefix-length 128)
  :config
  (global-company-mode t))

(use-package company-quickhelp
  :demand t
  :after company
  :config
  (company-quickhelp-mode))

(use-package company-lsp
  :after (company lsp-mode)
  :custom
  (company-lsp-async t)
  (company-lsp-enable-snippets nil)
  (company-lsp-enable-recompletion t)
  :config
  (add-to-list 'company-backends #'company-lsp))
#+END_SRC

** Checkers/Linters

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :custom-face
  (flycheck-info ((nil (:foreground "#80FF80" :underline nil))))
  (flycheck-warning ((nil (:foreground "#daa848" :underline nil))))
  (flycheck-error ((nil (:foreground "#ff6c6b" :underline nil))))
  :custom
  (flycheck-python-pylint-executable ign:python-executable)
  (flycheck-python-pycompile-executable ign:python-executable)
  (flycheck-python-flake8-executable ign:python-executable)
  (flycheck-python-mypy-executable ign:python-executable)
  (flycheck-check-syntax-automatically '(mode-enabled save))
  :config
  (global-flycheck-mode t))
#+END_SRC

** Project

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :bind
  (:map projectile-mode-map
   ("C-c p" . projectile-command-map))
  :custom
  (projectile-project-search-path '("~/Projects/"))
  (projectile-indexing-method 'hybrid)
  (projectile-sort-order 'access-time)
  (projectile-enable-caching t)
  (projectile-require-project-root t)
  (projectile-completion-system 'ivy)
  :config
  (projectile-mode t)
  (counsel-projectile-mode))

(use-package counsel-projectile
  :after (counsel projectile))
#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :demand t
  :hook
  (c-mode . lsp)
  :bind
  (:map lsp-mode-map
   ("M-/" . company-lsp)
   ("C-c C-j" . lsp-ui-imenu)
   ("C-c d" . lsp-find-definition)
   ("C-c e" . lsp-rename)
   ("C-c f" . lsp-format-buffer)
   ("C-c r" . lsp-ui-peek-find-references)
   ("C-c t" . lsp-find-type-definition))
  :custom
  (lsp-auto-guess-root t)
  (lsp-before-save-edits t)
  (lsp-enable-indentation t)
  (lsp-auto-configure nil)
  :config
  (require 'lsp-clients))

(use-package lsp-ui)

(use-package dap-mode
  :after lsp-mode
  :hook lsp-mode
  :config
  (require 'dap-lldb))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
(use-package pip-requirements)
(use-package sphinx-doc
  :hook
  (python-mode . sphinx-doc-mode))

(use-package python
  :ensure nil
  :after flycheck
  :custom
  (python-indent 4)
  (python-shell-interpreter ign:ipython-executable)
  (python-shell-interpreter-args "--simple-prompt -i")
  (python-fill-docstring-style 'pep-257)
  (gud-pdb-command-name (concat ign:python-executable " -m gdb"))
  (py-split-window-on-execute t))

(use-package elpy
  :after company
  :bind
  (:map python-mode-map
   ("C-c d" . elpy-goto-definition)
   ("C-c e" . elpy-multiedit-python-symbol-at-point)
   ("C-c f" . elpy-black-fix-code)
   ("C-c RET" . elpy-shell-send-region-or-buffer))
  :hook
  (python-mode . elpy-mode)
  :custom
  (elpy-rpc-python-command ign:python-executable)
  :config
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)
  (delete 'elpy-module-company elpy-modules)
  (add-to-list 'company-backends #'elpy-company-backend)
  (elpy-enable))
#+END_SRC

*** Jupyter

#+BEGIN_SRC emacs-lisp
(use-package ein
  :custom
  (ein:completion-backend 'ein:use-company-jedi-backends)
  (ein:use-auto-complete-superpack t))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :demand t
  :after company
  :mode ("\\.mly\\'" . tuareg-menhir-mode)
  :custom
  (tuareg-match-patterns-aligned t)
  (tuareg-indent-align-with-first-arg t))

(use-package merlin
  :if (file-exists-p "~/.emacs.d/opam-user-setup.el")
  :after tuareg
  :hook
  (tuareg-mode . merlin-mode)
  :config
  (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el"))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure nil
  :hook
  (c-mode . (lambda () (setq indent-tabs-mode t)
                       (global-aggressive-indent-mode -1)))
  :custom
  (c-default-style "linux")
  (c-basic-offset 4))

(use-package company-c-headers
  :demand t
  :after company
  :config
  (add-to-list 'company-backends 'company-c-headers))
#+END_SRC

** GNUplot

#+BEGIN_SRC emacs-lisp
(use-package gnuplot)
(use-package gnuplot-mode)
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
(setq-default require-final-newline t)
(global-subword-mode t)
(delete-selection-mode t)
(add-hook 'before-save-hook #'delete-trailing-whitespace)

(global-set-key [remap fill-paragraph] #'ign:fill-or-unfill)

(use-package expand-region
  :bind
  ("C-=" . er/expand-region))
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  ("C-'" . avy-goto-char-2)
  :custom
  (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-t ?\C-x)
(keyboard-translate ?\C-x ?\C-t)

(define-key key-translation-map (kbd "M-t") (kbd "M-x"))
(define-key key-translation-map (kbd "M-x") (kbd "M-t"))
(define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

(use-package bind-key)
(bind-key* "C-x k" 'delete-window)
(bind-key* "C-x w" 'split-window-right)
(bind-key* "C-x t" 'ign:term-toggle)
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand t
  :config
  (which-key-mode)
  :bind
  ("C-h m" . which-key-show-major-mode)
  ("C-h b" . which-key-show-top-level))
#+END_SRC

* Community
** Browser

#+BEGIN_SRC emacs-lisp
(setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
(use-package elcord
  :if (executable-find "discord")
  :config
  (elcord-mode))
#+END_SRC
