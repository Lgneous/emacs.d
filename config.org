* Encoding

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))

  (setq-default use-package-always-defer nil)
  (setq-default use-package-always-demand t)
  (setq-default use-package-always-ensure t)
  (setq-default byte-compile-warnings nil)
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
  (defun ign/do-nothing ()
    "Do nothing."
    (interactive)
    nil)

  (defun ign/before (to-call-before f)
    "Run TO-CALL-BEFORE then run F."
    (funcall to-call-before)
    (funcall f))

  (defun ign/after (to-call-after f)
    "Run F then run TO-CALL-AFTER."
    (funcall f)
    (funcall to-call-after))

  (defun ign/split-window-right ()
    "Create a new window split to the right and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'split-window-right))

  (defun ign/split-window-below ()
    "Create a new window split below and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'split-window-below))

  (defun ign/delete-window ()
    "Delete the current window and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'delete-window))

  (defun ign/popwin-term (name)
    "Pop a newly created terminal at the bottom of the frame, make its buffer name NAME."
    (popwin:display-buffer-1
     (or (get-buffer name)
         (save-window-excursion
           (multi-term)))
     :default-config-keywords '(:height 15 :position :bottom :noselect nil :stick t))
    (rename-buffer name))

  (cl-defun ign/term-toggle (&optional (name "*term*"))
    "Create or destroy a popped up terminal based on whether or not it exists."
    (interactive)
    (cond
     ((get-buffer-window name) (kill-buffer name))
     ((get-buffer name) (progn (kill-buffer name) (ign/term-toggle)))
     (t (ign/popwin-term name))))

  (defun ign/fill-or-unfill ()
    "Fill or unfill based on the previous command."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'ign/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun ign/refresh-buffer ()
    "Refresh the current buffer."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun ign/sh-run-safe (command &rest args)
    (if (executable-find command)
        (shell-command (string-join (nconc (list command) args) " "))
      (message (concat "'" command "' not found found; please install"))))

  (defun ign/reload ()
    "Reload the configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun ign/edit-config ()
    "Open the configuration file in the current buffer."
    (interactive)
    (find-file ign/config-path))

  (defun ign/toggle-mark ()
    "Pop a mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (push-mark nil nil t)))

  (defun ign/toggle-mark-rectangle ()
    "Pop a rectangle mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (rectangle-mark-mode)))

  (defun ign/first-occurence (predicate list)
    "Return the first occurence in LIST which, when applied to PREDICATE returns t."
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall predicate head))
          head
        (ign/first-occurence predicate tail))))

  (defun ign/last-occurence (predicate list)
    "Return the last occurence in LIST which, when applied to PREDICATE returns t."
    (ign/first-occurence predicate (reverse list)))

  (defmacro ign/find-executables (&rest list)
    "Return the first occurence in LIST whose value corresponds to an executable."
    (ign/first-occurence #'executable-find list))

  (defun ign/save-buffer (arg)
    "Save the current buffer and remove trailing whitespace if called interactively."
    (interactive "p")
    (when (/= arg 1)
      (delete-trailing-whitespace))
    (save-buffer))
#+END_SRC

* Custom Variables
#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst ign/config-path (concat user-emacs-directory "config.org"))
  (defconst ign/is-a-mac (memq window-system '(mac ns)))
  (defconst ign/python-executable "python3")
  (defconst ign/ipython-executable (if ign/is-a-mac "ipython" "ipython3"))
  (defconst ign/cl-executable "sbcl")
  (defvar ign/leader-map (make-sparse-keymap))
  (define-prefix-command 'ign/leader-map)
#+END_SRC

* System
** MacOS

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if ign/is-a-mac
    :config
    (exec-path-from-shell-initialize))

  (when (memq window-system '(mac ns))
    (setq mac-command-modifier 'meta))
#+END_SRC

** Version-specific

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font (if ign/is-a-mac "Menlo-14" "SourceCodePro-10") nil t)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if (display-graphic-p)
    :custom-face
    (font-lock-function ((t (:foreground "#e06c75"))))
    :config
    (doom-themes-org-config)
    (load-theme 'doom-vibrant t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-python-executable ign/python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    :config
    (doom-modeline-mode))
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'hbar)
  (setq-default cursor-in-non-selected-windows nil)
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :bind
    (:map dashboard-mode-map
          ("n" . widget-forward)
          ("p" . widget-backward))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)))
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (global-hl-line-mode t))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

** Dependencies

#+BEGIN_SRC emacs-lisp
  (use-package popwin)
  (use-package multi-term
    :custom
    (multi-term-program (ign/find-executables "zsh" "bash" "sh")))
#+END_SRC

* Completion Frontend

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind
    ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ([remap xref-find-definitions] . ign/do-nothing)
          ([remap xref-find-definitions-other-frame] . ign/do-nothing)
          ([remap xref-find-definitions-other-window] . ign/do-nothing)
          ([remap xref-find-references] . ign/do-nothing)
          ([remap xref-find-apropos] . ign/do-nothing)
          ("<return>" . ivy-alt-done))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package counsel
    :config
    (counsel-mode))

  (use-package swiper
    :bind
    ("C-r" . swiper-isearch)
    ("C-s" . swiper))

  (use-package all-the-icons-ivy
    :after ivy
    :config
    (setq-default all-the-icons-ivy-file-commands (append all-the-icons-ivy-file-commands '(counsel-projectile-find-file counsel-projectile-find-file-dwim)))
    (all-the-icons-ivy-setup))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.\\(org\\|ORG\\)\\'" . org-mode)
    :ensure nil
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    :config
    (use-package ob-ipython)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (ocaml . t)
       (gnuplot . t))))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)
#+END_SRC

* Programming Related

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :hook
    (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    (:map ign/leader-map
          ("g" . magit-status)))

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :custom
    (password-cache-expiry nil)
    :config
    (add-to-list 'tramp-methods
                 '("gssh"
                   (tramp-login-program "gcloud compute ssh")
                   (tramp-login-args (("%h")))
                   (tramp-async-args (("-q")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                                   ("-o" "UserKnownHostsFile=/dev/null")
                                   ("-o" "StrictHostKeyChecking=no")))
                   (tramp-default-port 22))))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("M-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-tooltip-mouse ((t (:background "#30343c"))))
    (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-preview ((t (:background "#30343c"))))
    (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-scrollbar-fg ((t (:background "#30343c"))))
    (company-scrollbar-bg ((t (:background "#30343c"))))
    (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    :config
    (global-company-mode t))

  (use-package company-quickhelp
    :after company
    :config
    (company-quickhelp-mode))
#+END_SRC

** Checkers/Linters

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :preface
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      [#b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b11100111
       #b11100111
       #b11100111
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000])
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    :custom
    (flycheck-python-pylint-executable ign/python-executable)
    (flycheck-python-pycompile-executable ign/python-executable)
    (flycheck-python-flake8-executable ign/python-executable)
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :config
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info
      :info-list-face 'flycheck-error-list-info)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning
      :warning-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (global-flycheck-mode t))
#+END_SRC

** Project

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-project-search-path '("~/Projects/"))
    (projectile-indexing-method 'hybrid)
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t)
    (counsel-projectile-mode))

  (use-package counsel-projectile
    :after (counsel projectile))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package sphinx-doc
    :hook
    (python-mode . sphinx-doc-mode)
    :bind
    (:map python-mode-map
          ("C-c C-d" . sphinx-doc)))

  ;; To anyone that is cursed enough to see this code, I'm sorry
  (use-package python
    :ensure nil
    :after flycheck
    :mode
    ("\\.py[iw]?\\'" . python-mode)
    :custom
    (python-indent 4)
    (python-shell-interpreter ign/ipython-executable)
    (python-shell-interpreter-args "--simple-prompt -i")
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat ign/python-executable " -m pdb"))
    (py-split-window-on-execute t))

  (use-package elpy
    :after company
    :hook
    (python-mode . elpy-mode)
    :bind
    (:map python-mode-map
          ("C-c C-c" . elpy-shell-send-top-statement))
    :custom
    (elpy-rpc-python-command ign/python-executable)
    :config
    (delete 'elpy-module-highlight-indentation elpy-modules)
    (delete 'elpy-module-flymake elpy-modules)
    (delete 'elpy-module-company elpy-modules)
    (add-to-list 'company-backends #'elpy-company-backend)
    (elpy-enable))
#+END_SRC

*** Jupyter

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package opam
    :init
    (opam-init))

  (use-package tuareg
    :after company
    :mode
    (("\\.ml[ip]?\\'" . tuareg-mode)
     ("\\.mly\\'" . tuareg-menhir-mode)
     ("[./]opam_?\\'" . tuareg-opam-mode)
     ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
     ("\\.eliomi?\\'" . tuareg-mode))
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t))

  (use-package merlin
    :if (file-exists-p "~/.emacs.d/opam-user-setup.el")
    :after
    (opam tuareg)
    :hook
    (tuareg-mode . merlin-mode)
    :bind
    (:map merlin-mode-map
          ("M-." . merlin-locate)
          ("C-c C-h" . merlin-type-enclosing)
          ("C-c C-r" . nil))
    :custom
    (merlin-error-after-save nil)
    (merlin-completion-with-doc t)
    :config
    (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el"))

  (use-package utop
    :after opam
    :preface
    (defun ign/utop-eval-phrase ()
      "Eval the surrounding Caml phrase (or block) in utop."
      (interactive)
      (utop-prepare-for-eval)
      (let ((end (point)))
        (save-excursion
          (let ((triple (funcall utop-discover-phrase)))
            (utop-eval (car triple) (cdr triple))))
        (when utop-skip-after-eval-phrase
          (goto-char end)
          (funcall utop-next-phrase-beginning))))
    :hook
    (tuareg-mode . utop-minor-mode)
    :bind
    (:map tuareg-mode-map
          ("C-c C-c" . ign/utop-eval-phrase)
          ("C-c C-z" . utop))
    (:map utop-mode-map
          ("C-c C-g" . nil)
          ("C-c C-k" . nil)
          ("C-c C-s" . nil))
    :custom
    (utop-command "opam config exec -- utop -emacs")
    (utop-edit-command nil))

  (use-package dune)

  (use-package ocp-indent
    :after tuareg
    :bind
    (:map merlin-mode-map
          ("C-c C-r f" . ocp-indent-buffer))
    :hook (tuareg-mode . ocp-indent-caml-mode-setup))

  (use-package flycheck-ocaml
    :after merlin
    :config
    (flycheck-ocaml-setup))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :hook
    (c-mode . (lambda () (setq indent-tabs-mode t)))
    :custom
    (c-auto-newline t)
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package irony
    :hook
    (c++-mode . irony-mode)
    (c-mode . irony-mode)
    (irony-mode . irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :after (irony company)
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package company-c-headers
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :mode
    (("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode)
     ("\\.cljs\\'" . clojurescript-mode)
     ("\\.cljc\\'" . clojurec-mode))
    :custom
    (cider-repl-pop-to-buffer-on-connect nil)
    (cider-repl-display-in-current-window nil)
    (cider-font-lock-dynamically t))

  (use-package elein)
#+END_SRC

** Common Lisp

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :bind
    (:map slime-repl-mode-map
          ("C-l" . slime-repl-clear-buffer))
    :custom
    (inferior-lisp-program ign/cl-executable)
    (slime-contribs '(slime-fancy)))
#+END_SRC

** R & Julia

#+BEGIN_SRC emacs-lisp
   (use-package ess
     :pin melpa-stable)
#+END_SRC

** GNUplot

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot)

  (use-package gnuplot-mode
    :mode
    ("\\.gp\\'" "\\.gnuplot\\'"))
#+END_SRC

** CSV

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "\\.csv\\'")
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)

  (global-set-key [remap fill-paragraph] #'ign/fill-or-unfill)

  (use-package expand-region
    :bind
    (:map ign/leader-map
          ("SPC" . er/expand-region)))
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :custom
    (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))

  (use-package imenu-list
    :bind
    (:map ign/leader-map
          ("j" . imenu-list-smart-toggle))
    :custom
    (imenu-list-auto-resize t)
    (imenu-auto-rescan t))
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key key-translation-map (kbd "M-x") (kbd "M-t"))

  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)
  (define-key ign/leader-map (kbd "t") #'ign/term-toggle)

  (use-package bind-key)
  (bind-key* "M-m" #'ign/leader-map)
  (bind-key* "C-x k" #'delete-window)
  (bind-key* "C-x w" #'split-window-right)
  (bind-key* "C-x C-s" #'ign/save-buffer)
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :bind
    ("C-h" . hydra-help/body)
    (:map ign/leader-map
          ("a" . hydra-avy/body)
          ("p" . hydra-projectile/body)))

  (defhydra hydra-help (:color blue :hint none)
    "
  Bindings        | Describes       | Others
  --------------- | --------------- | ------------------
  _b_: Top level    | _f_: Function     | _l_: Command history
  _m_: Major mode   | _v_: Variable     |

    "
    ("b" which-key-show-top-level)
    ("m" which-key-show-major-mode)
    ("f" counsel-describe-function)
    ("v" counsel-describe-variable)
    ("l" view-lossage))

  (defhydra hydra-projectile (:color blue :hint none)
    "
  --------------------- | ------------------- | ------------------
  _a_: Find other file    | _e_: Recent Files     | _k_: Kill buffers
  _b_: Switch buffer      | _f_: Find File        | _p_: Switch project
  _c_: Compile            | _g_: Grep             | _t_: Impl ↔ Test
  _d_: Find directory     | _i_: IBuffer          | _v_: Version control
    "
    ("a" projectile-find-other-file)
    ("b" projectile-switch-to-buffer)
    ("c" projectile-compile-project)
    ("d" projectile-find-dir)
    ("e" projectile-recentf)
    ("f" projectile-find-file)
    ("g" projectile-grep)
    ("i" projectile-ibuffer)
    ("j" projectile-find-tag)
    ("k" projectile-kill-buffers)
    ("p" projectile-switch-project)
    ("t" projectile-toggle-between-implementation-and-test)
    ("v" projectile-vc))

  (defhydra hydra-avy (:exit t :hint nil)
    "
  Line          | Region        | Goto
  ------------- | ------------- | ------------------
  _y_: Yank       | _Y_: Yank       | _c_: Char Timed   _C_: Char
  _m_: Move       | _M_: Move       | _w_: Word         _W_: Word*
  _k_: Kill       | _K_: Kill       | _l_: Line         _L_: End of Line
    "
    ("c" avy-goto-char-timer)
    ("C" avy-goto-char)
    ("w" avy-goto-word-1)
    ("W" avy-goto-word-0)
    ("l" avy-goto-line)
    ("L" avy-goto-end-of-line)
    ("m" avy-move-line)
    ("M" avy-move-region)
    ("k" avy-kill-whole-line)
    ("K" avy-kill-region)
    ("y" avy-copy-line)
    ("Y" avy-copy-region))
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

* Community
** Browser

#+BEGIN_SRC emacs-lisp
  (setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :config
    (elcord-mode))
#+END_SRC
