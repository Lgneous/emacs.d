* Table of Contents                                                     :TOC:
- [[#backups][Backups]]
- [[#initialization][Initialization]]
- [[#packages][Packages]]
- [[#encoding][Encoding]]
- [[#dependencies][Dependencies]]
- [[#functions][Functions]]
- [[#custom-variables][Custom Variables]]
- [[#system][System]]
  - [[#shell-path][Shell Path]]
  - [[#version-specific][Version-specific]]
- [[#gui][GUI]]
- [[#bindings][Bindings]]
  - [[#hydra][Hydra]]
  - [[#modal-editing][Modal Editing]]
  - [[#which-key][Which-key]]
- [[#appearance][Appearance]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#cursor][Cursor]]
- [[#interface][Interface]]
  - [[#splash-screen][Splash Screen]]
  - [[#lines][Lines]]
  - [[#line-numbers][Line numbers]]
  - [[#scrolling][Scrolling]]
  - [[#confirmation-messages][Confirmation messages]]
  - [[#bells][Bells]]
  - [[#terminal][Terminal]]
  - [[#parentheses][Parentheses]]
- [[#completion-frontend][Completion Frontend]]
  - [[#ivy][Ivy]]
- [[#org][Org]]
- [[#programming-related][Programming Related]]
  - [[#git][Git]]
  - [[#tramp][TRAMP]]
  - [[#auto-completion][Auto-Completion]]
  - [[#checkerslinters][Checkers/Linters]]
  - [[#project-management][Project Management]]
  - [[#auto-ide][Auto-IDE]]
  - [[#languages][Languages]]
- [[#editing][Editing]]
- [[#navigation][Navigation]]
- [[#community][Community]]
  - [[#browser][Browser]]
  - [[#discord][Discord]]

* Backups

#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Initialization

Add lexical binding support
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Hotfix, requires in emacs 26.1 due to bug #34341
  ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq-default use-package-always-defer nil)
  (setq-default use-package-always-demand t)
  (setq-default use-package-always-ensure t)
  (setq-default byte-compile-warnings nil)

  ;; Useful to speed up start-up time
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+END_SRC

* Encoding

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Dependencies

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :defer t
    :commands popwin:display-buffer-1)
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
  (defun ign/before (to-call-before f)
    "Run TO-CALL-BEFORE then run F."
    (funcall to-call-before)
    (funcall f))

  (defun ign/after (to-call-after f)
    "Run F then run TO-CALL-AFTER."
    (funcall f)
    (funcall to-call-after))

  (defun ign/split-window-right ()
    "Create a new window split to the right and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'split-window-right))

  (defun ign/split-window-below ()
    "Create a new window split below and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'split-window-below))

  (defun ign/delete-window ()
    "Delete the current window and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'delete-window))

  (defun ign/popwin-term (name)
    "Pop a newly created terminal at the bottom of the frame, make its buffer name NAME."
    (popwin:display-buffer-1
     (or (get-buffer name)
         (save-window-excursion
           (eshell)))
     :default-config-keywords '(:height 15 :position :bottom :noselect nil :stick t))
    (rename-buffer name))

  (cl-defun ign/term-toggle (&optional (name "*term*"))
    "Create or destroy a popped up terminal based on whether or not it exists."
    (interactive)
    (cond
     ((get-buffer-window name) (kill-buffer name))
     ((get-buffer name) (progn (kill-buffer name) (ign/term-toggle)))
     (t (ign/popwin-term name))))

  (defun ign/fill-or-unfill ()
    "Fill or unfill based on the previous command."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'ign/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun ign/refresh-buffer ()
    "Refresh the current buffer."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun ign/sh-run-safe (command &rest args)
    (if (executable-find command)
        (shell-command (string-join (nconc (list command) args) " "))
      (message (concat "'" command "' not found found; please install"))))

  (defun ign/reload ()
    "Reload the configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun ign/edit-config ()
    "Open the configuration file in the current buffer."
    (interactive)
    (find-file ign/config-path))

  (defun ign/toggle-mark ()
    "Pop a mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (push-mark nil nil t)))

  (defun ign/toggle-mark-rectangle ()
    "Pop a rectangle mark if one doesn't exist already, deactivate it otherwise."
    (interactive)
    (if (region-active-p)
        (deactivate-mark)
      (rectangle-mark-mode)))

  (defun ign/first-occurence (predicate list)
    "Return the first occurence in LIST which, when applied to PREDICATE returns t."
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall predicate head))
          head
        (ign/first-occurence predicate tail))))

  (defun ign/last-occurence (predicate list)
    "Return the last occurence in LIST which, when applied to PREDICATE returns t."
    (ign/first-occurence predicate (reverse list)))

  (defmacro ign/find-executables (&rest list)
    "Return the first occurence in LIST whose value corresponds to an executable."
    (ign/first-occurence #'executable-find list))

  (defun ign/save-buffer (arg)
    "Save the current buffer and remove trailing whitespace if called interactively."
    (interactive "p")
    (when (= arg 1)
      (delete-trailing-whitespace))
    (save-buffer))

  (defun ign/kill-line-or-region (arg)
    "Cut selection or, if no selection, cut cursor line."
    (interactive "p")
    (if (region-active-p)
        (call-interactively #'kill-region)
      (kill-visual-line (if (= arg 1) nil arg))))

  (defun -ign/set (pairs)
    "Dispatch a list of dotted PAIRS into a single list, used by IGN/SET."
    (mapcan (lambda (p) (list (car p) (cdr p))) pairs))

  (defmacro ign/set (&rest pairs)
    "(ign/set (a . b) (c . d)) => (setq a b c d)"
    `(lambda () (setq ,@(-ign/set pairs))))
#+END_SRC

* Custom Variables
#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/zero")
  (defconst ign/config-path (concat user-emacs-directory "config.org"))
  (defconst ign/is-a-mac (memq window-system '(mac ns)))
  (defconst ign/python-executable "python3")
  (defconst ign/ipython-executable (if ign/is-a-mac "ipython" "ipython3"))
#+END_SRC

* System
** Shell Path

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))

  (when (memq window-system '(mac ns))
    (setq mac-command-modifier 'meta))
#+END_SRC

** Version-specific

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key key-translation-map (kbd "M-x") (kbd "M-t"))

  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

  (use-package bind-key)
  (bind-key* "C-x k" #'delete-window)
  (bind-key* "C-x C-s" #'ign/save-buffer)
  (bind-key* "C-k" #'ign/kill-line-or-region)
#+END_SRC

** Hydra

NOTE: These hydras depend on packages defined below and are put here for documentation purposes.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :custom
    (hydra-hint-display-type 'lv)
    :bind
    ("C-h" . hydra-help/body)
    ("M-m" . hydra-leader/body))

  (use-package pretty-hydra
    :after hydra)

  (pretty-hydra-define hydra-config (:exit t :color amaranth)
    (" Configuration"
     (("e" ign/edit-config "config file")
      ("g" ign/refresh-buffer "refresh buffer")
      ("r" ign/reload "reload"))))

  (pretty-hydra-define hydra-help (:exit t :color amaranth)
    ("Bindings"
     (("b" which-key-show-top-level "top-level")
      ("m" which-key-show-major-mode "major mode"))
     "Describes"
     (("k" describe-key-briefly "key")
      ("f" describe-function "function")
      ("v" describe-variable "variable"))
     "Others"
     (("l" view-lossage "command history"))))

  (pretty-hydra-define hydra-projectile (:exit t :color amaranth)
    (" Projectile"
     (("a" projectile-find-other-file "find other file")
      ("b" projectile-switch-to-buffer "switch buffer")
      ("c" projectile-compile-project "compile")
      ("d" projectile-find-dir "find directory"))
     ""
     (("e" projectile-recentf "recent files")
      ("f" projectile-find-file "find file")
      ("g" projectile-grep "grep")
      ("k" projectile-kill-buffers "kill project buffers"))
     ""
     (("p" projectile-switch-project "switch project")
      ("t" projectile-toggle-between-implementation-and-test "impl ↔ test")
      ("v" projectile-vc "version control"))))

  (pretty-hydra-define hydra-avy (:exit t :color amaranth)
    ("Goto"
     (("c" avy-goto-char-timer "timed char")
      ("c" avy-goto-char "char")
      ("w" avy-goto-word-1 "word")
      ("w" avy-goto-word-0 "word*")
      ("l" avy-goto-line "bol")
      ("l" avy-goto-end-of-line "eol"))
    "line"
    (("m" avy-move-line "move")
     ("k" avy-kill-whole-line "kill")
     ("y" avy-copy-line "yank"))
    "region"
    (("m" avy-move-region "move")
     ("k" avy-kill-region "kill")
     ("y" avy-copy-region "yank"))))

  (pretty-hydra-define hydra-find (:exit t :color amaranth)
    ("Find"
     (("d" dired "directory")
      ("f" counsel-find-file "file"))))

  (pretty-hydra-define hydra-window (:exit t :color amaranth)
    ("Window"
     (("2" split-window-below "split below")
      ("3" split-window-right "split right")
      ("s" ivy-switch-buffer "switch")
      ("q" delete-window "delete"))))

  (pretty-hydra-define hydra-leader (:exit t :color amaranth)
    (" Leader"
     (("RET" hydra-config/body "+config")
      ("SPC" ign/ide-resolve "+ide")
      (";" hydra-avy/body "+jump"))
     ""
     (("f" hydra-find/body "+find")
      ("g" magit-status "git")
      ("p" hydra-projectile/body "+project"))
     ""
     (("s" save-buffer "save buffer")
      ("t" ign/term-toggle "terminal")
      ("w" hydra-window/body "+window"))))
#+END_SRC

** Modal Editing

#+BEGIN_SRC emacs-lisp
  (use-package xah-fly-keys
    :preface
    (defun ign/command-mode ()
      (interactive)
      (define-key xah-fly-key-map (kbd "SPC") #'hydra-leader/body)
      (define-key xah-fly-key-map (kbd "C-u") #'universal-argument)
      (define-key xah-fly-key-map (kbd "a") #'counsel-M-x)
      (define-key xah-fly-key-map (kbd "b") #'er/expand-region)
      (define-key xah-fly-key-map (kbd "l") #'recenter-top-bottom))
    (defun ign/insert-mode ()
      (interactive)
      (define-key xah-fly-key-map (kbd "C-u") #'xah-fly-command-mode-activate))
    :hook
    (xah-fly-insert-mode-activate . ign/insert-mode)
    (xah-fly-command-mode-activate . ign/command-mode)
    :custom
    (xah-fly-use-control-key nil)
    (xah-fly-use-meta-key nil)
    :config
    (xah-fly-keys)
    (ign/command-mode))
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font (if ign/is-a-mac "Menlo-18" "SourceCodePro-12") nil t)

  (use-package all-the-icons
    :if (display-graphic-p))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if (display-graphic-p)
    :custom-face
    (font-lock-function ((t (:foreground "#e06c75"))))
    :custom
    (doom-vibrant-brighter-comments t)
    (doom-vibrant-brighter-modeline t)
    :config
    (doom-themes-org-config)
    (load-theme 'doom-one t))

  (use-package solaire-mode
    :defer t
    :hook
    (prog-mode . turn-on-solaire-mode)
    :custom
    (solaire-mode-remap-modeline nil)
    :config
    (solaire-mode-swap-bg))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-python-executable ign/python-executable)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-version t)
    (doom-modeline-buffer-file-name-style 'file-name)
    :config
    (doom-modeline-mode))
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box)
  (setq-default cursor-in-non-selected-windows nil)

  (use-package beacon
    :defer t
    :hook
    (focus-in . beacon-blink)
    :config
    (beacon-mode))
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :if (display-graphic-p)
    :bind
    (:map dashboard-mode-map
          ("C-n" . widget-forward)
          ("C-p" . widget-backward))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    (dashboard-set-heading-icons t)
    (dashboard-set-footer nil)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `(((,"" "Github" "Github"
         (lambda (&rest _) (browse-url-generic "https://github.com/Lgneous")))
        (,"" "Configuration" "Configuration"
         (lambda (&rest _) (ign/edit-config)))
        (,"" "Reload" "Restart emacs"
         (lambda (&rest _) (ign/reload))))))
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (add-hook 'prog-mode-hook #'hl-line-mode))

  (use-package highlight-indent-guides
    :disabled
    :hook
    (focus-in . (lambda () (setq highlight-indent-guides-character (-> (buffer-name) all-the-icons-icon-for-file string-to-char))))
    (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

** Terminal

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure nil
    :custom
    (eshell-banner-message "")
    :config
    (defalias 'eshell/clear 'eshell/clear-scrollback))

  (use-package eshell-prompt-extras
    :after eshell
    :custom
    (epe-path-style 'single)
    (epe-show-python-info nil)
    (eshell-prompt-function #'epe-theme-lambda))
#+END_SRC

** Parentheses

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package smartparens
    :defer t
    :hook
    (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+END_SRC

* Completion Frontend
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind
    ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done)
          ("C-s" . ivy-next-line)
          ("C-r" . ivy-previous-line))
    :custom-face
    (ivy-current-match ((t (:background "#3d4451"))))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-wrap t)
    (ivy-action-wrap t)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    (ivy-initial-inputs-alist nil)
    :config
    (ivy-mode))

  (use-package counsel
    :after ivy
    :config
    (counsel-mode))

  (use-package swiper
    :after ivy
    :bind
    ("C-r" . swiper-isearch-backward)
    ("C-s" . swiper-isearch))

  ;; This will make counsel-M-x sort candidates by frequency
  (use-package smex)
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode
    ("\\.org\\'" . org-mode)
    :ensure nil
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "ipython3 -i --simple-prompt")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (use-package ob-ipython)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ipython . t)
       (ocaml . t)
       (gnuplot . t))))

  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)
#+END_SRC

* Programming Related
** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :commands magit-status)

  (use-package forge
    :after magit)

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :custom
    (password-cache-expiry nil)
    :config
    (add-to-list 'tramp-methods
                 '("gssh"
                   (tramp-login-program "gcloud compute ssh")
                   (tramp-login-args (("%h")))
                   (tramp-async-args (("-q")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                                   ("-o" "UserKnownHostsFile=/dev/null")
                                   ("-o" "StrictHostKeyChecking=no")))
                   (tramp-default-port 22))))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("M-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom-face
    (company-tooltip ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-annotation ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-tooltip-mouse ((t (:background "#30343c"))))
    (company-tooltip-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-tooltip-common-selection ((t (:foreground "#abb2bf" :background "#393f49"))))
    (company-preview ((t (:background "#30343c"))))
    (company-preview-common ((t (:foreground "#abb2bf" :background "#30343c"))))
    (company-scrollbar-fg ((t (:background "#30343c"))))
    (company-scrollbar-bg ((t (:background "#30343c"))))
    (company-template-field ((t (:foreground "#282c34" :background "#c678dd"))))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    :config
    (global-company-mode t))
#+END_SRC

** Checkers/Linters

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :custom
    (flycheck-checkers nil)
    :config
    (global-flycheck-mode))
#+END_SRC

** Project Management

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-project-search-path '("~/Projects/"))
    (projectile-indexing-method 'hybrid)
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t))

  (use-package counsel-projectile
    :after
    (counsel projectile)
    :config
    (counsel-projectile-mode t)
    (defalias 'projectile-switch-to-buffer 'counsel-projectile-switch-to-buffer)
    (defalias 'projectile-find-dir 'counsel-projectile-find-dir)
    (defalias 'projectile-find-file 'counsel-projectile-find-file)
    (defalias 'projectile-grep 'counsel-projectile-grep)
    (defalias 'projectile-switch-project 'counsel-projectile-switch-project))
#+END_SRC

** Auto-IDE

#+BEGIN_SRC emacs-lisp
  (defvar ign/ide--alist '())
  (defun ign/ide-add (mode hydra)
    (push `(,mode . ,hydra) ign/ide--alist))
  (defun ign/ide-resolve ()
    (interactive)
    (let ((hydra (alist-get major-mode ign/ide--alist)))
      (if hydra
          (funcall hydra)
        (message "IDE not found for %s" major-mode))))
#+END_SRC

** Languages
*** LSP

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :custom
    (lsp-enable-snippet nil))

  (use-package lsp-ui
    :after lsp-mode
    :hook
    (lsp-mode . lsp-ui-mode))

  (use-package company-lsp
    :after (company lsp-mode)
    :custom
    (company-lsp-async t)
    (company-lsp-cache-candidates t)
    (company-lsp-enable-snippets nil)
    (company-lsp-enable-recompletion t))

  (pretty-hydra-define hydra-lsp (:exit t :color amaranth :title " LSP")
    ("Find"
     (("." lsp-ui-peek-find-references "find references")
      ("," lsp-find-definition "find definition")
      ("t" lsp-find-type-definition "find type definition"))
     "Refactor"
     (("e" lsp-rename "rename symbol at point")
      ("f" lsp-format-buffer "format buffer"))
     "Show"
     (("d" lsp-ui-doc-show "documentation")
      ("j" lsp-ui-imenu "symbol table")
      ("l" lsp-ui-flycheck-list "error list"))))
#+END_SRC

*** C/C++

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :hook
    (c-mode . (lambda () (setq indent-tabs-mode t)))
    :custom
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package ccls
    :after lsp-mode
    :hook
    ((c-mode c++-mode) . lsp)
    :custom
    (ccls-executable "~/ccls/Release/ccls")
    :config
    (ign/ide-add 'c-mode #'hydra-lsp/body)
    (ign/ide-add 'c++-mode #'hydra-lsp/body))
#+END_SRC

*** Jupyter

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

*** OCaml

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :hook
    (tuareg-mode . lsp)
    :mode
    (("\\.ml[ip]?\\'" . tuareg-mode)
     ("\\.mly\\'" . tuareg-menhir-mode)
     ("[./]opam_?\\'" . tuareg-opam-mode)
     ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
     ("\\.eliomi?\\'" . tuareg-mode))
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t)
    :config
    (ign/ide-add 'tuareg-mode #'hydra-lsp/body))
#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package python
    :ensure nil
    :after lsp
    :hook
    (python-mode . lsp)
    :custom
    (python-indent 4)
    (python-shell-interpreter ign/python-executable)
    ;; Required for MacOS, prevents newlines from being displayed as ^G
    (python-shell-interpreter-args "--simple-prompt -c exec('__import__(\\'readline\\')') -i")
    (python-fill-docstring-style 'pep-257)
    (gud-pdb-command-name (concat ign/python-executable " -m pdb"))
    (py-split-window-on-execute t)
    :config
    (ign/ide-add 'python-mode #'hydra-lsp/body))

  (use-package cython-mode)
  (use-package flycheck-cython)
#+END_SRC

* Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)

  (global-set-key [remap fill-paragraph] #'ign/fill-or-unfill)

  (use-package expand-region
    :defer t
    :commands er/expand-region)
#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :custom
    (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))
#+END_SRC

* Community
** Browser

#+BEGIN_SRC emacs-lisp
  (setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode))
#+END_SRC
