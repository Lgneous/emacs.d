* Table of Contents                                                     :TOC:
- [[#initialization][Initialization]]
- [[#packages][Packages]]
- [[#backups][Backups]]
- [[#encoding][Encoding]]
- [[#functions][Functions]]
- [[#custom-variables][Custom Variables]]
- [[#system][System]]
  - [[#shell-path][Shell Path]]
  - [[#version-specific][Version-specific]]
- [[#gui][GUI]]
- [[#appearance][Appearance]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#interface][Interface]]
  - [[#splash-screen][Splash Screen]]
  - [[#lines][Lines]]
  - [[#line-numbers][Line numbers]]
  - [[#scrolling][Scrolling]]
  - [[#confirmation-messages][Confirmation messages]]
  - [[#bells][Bells]]
  - [[#parentheses][Parentheses]]
  - [[#files][Files]]
  - [[#windows][Windows]]
  - [[#buffers][Buffers]]
- [[#bindings][Bindings]]
  - [[#discoverability][Discoverability]]
- [[#completion-frontend][Completion Frontend]]
  - [[#ivy][Ivy]]
- [[#editing][Editing]]
- [[#programming-related][Programming Related]]
  - [[#git][Git]]
  - [[#tramp][TRAMP]]
  - [[#terminals--comint][Terminals & Comint]]
  - [[#auto-completion][Auto-Completion]]
  - [[#checkerslinters][Checkers/Linters]]
  - [[#project-management][Project Management]]
  - [[#languages][Languages]]
- [[#writingdocumentation][Writing/Documentation]]
  - [[#org][Org]]
  - [[#tex][TeX]]
  - [[#pdf][PDF]]
- [[#community][Community]]
  - [[#discord][Discord]]
  - [[#key-frequency][Key Frequency]]

* Initialization

Add lexical binding support
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Packages

Set up package.el and use-package for later use, disable implicit lazy-loading
#+begin_src emacs-lisp
  (require 'package)

  ;; Hotfix, requires in emacs 26.1 due to bug #34341
  ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
  (setq-default gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (when (file-directory-p (concat user-emacs-directory "elpa-mirror"))
      (setq-default package-archives `(("melpa" . ,(concat user-emacs-directory "elpa-mirror/melpa"))
                                       ("gnu" . ,(concat user-emacs-directory "elpa-mirror/gnu"))
                                       ("org" . ,(concat user-emacs-directory "elpa-mirror/org")))))


  (when (< emacs-major-version 27)
    (package-initialize))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq-default use-package-always-defer nil)
  (setq-default use-package-always-demand t)
  (setq-default use-package-always-ensure t)
  (setq-default use-package-verbose t)
  (setq-default use-package-compute-statistics t)
  (setq-default byte-compile-warnings nil)

  ;; Useful to speed up start-up time
  ;; TODO: emacs27, move to early-init.el
  (eval-when-compile
    (setq-local gc-cons-threshold most-positive-fixnum)
    (setq-local gc-cons-percentage 0.6))

  (use-package try
    :defer t)
#+end_src

* Backups

I don't want any kind of backup, this is mostly due to saving being compulsory to me.
#+begin_src emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+end_src

* Encoding

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
  (setq-default save-buffer-coding-system 'utf-8)
#+end_src

* Functions

#+begin_src emacs-lisp
  (defun ign/fill-or-unfill ()
    "Fill or unfill based on the previous command."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'ign/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun ign/reload ()
    "Reload the configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun ign/edit-config ()
    "Open the configuration file in the current buffer."
    (interactive)
    (find-file ign/config-path))

  (defun ign/save-buffer (arg)
    "Save the current buffer and remove trailing whitespace unless called interactively."
    (interactive "p")
    (when (/= arg 1)
      (delete-trailing-whitespace))
    (save-buffer))

  (defun ign/kill-line-or-region (arg)
    "Cut selection or, if no selection, cut cursor line."
    (interactive "p")
    (if (region-active-p)
        (call-interactively #'kill-region)
      (kill-visual-line (if (= arg 1) nil arg))))
#+end_src

* Custom Variables

#+begin_src emacs-lisp
  (defconst ign/config-path (concat user-emacs-directory "config.org"))
  (defconst ign/project-path "~/Projects")
  (defconst ign/python-executable "python")
  (defconst ign/python-interactive "python")
  (defconst ign/use-all-the-icons-p (memq system-type '(gnu/linux darwin)))
  (when (memq system-type '(gnu/linux darwin))
    (setq-default custom-file "/dev/zero"))
#+end_src

* System
** Shell Path

This was originally used for MacOS only, but ended being useful for various tools that require on a shell to run
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq system-type '(gnu/linux darwin))
    :config
    (exec-path-from-shell-initialize))

  (when (eq system-type 'darwin)
    (setq-default mac-command-modifier 'meta))
#+end_src

** Version-specific

#+begin_src emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+end_src

* GUI

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+end_src

* Appearance
** Font

#+begin_src emacs-lisp
  (set-frame-font
   (pcase system-type
     ('gnu/linux "Inconsolata")
     ('darwin "Menlo-20")
     (_ "Consolas")))
#+end_src

Fancy icons from font-awesome, material-icons, ...
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (and ign/use-all-the-icons-p (display-graphic-p)))
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :after org
    :config
    (doom-themes-org-config)
    (load-theme 'doom-one t)
    (set-face-attribute 'org-level-1 nil :background (face-background 'default) :height 1.0))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-env-python-executable ign/python-executable)
    (doom-modeline-icon ign/use-all-the-icons-p)
    (doom-modeline-major-mode-icon ign/use-all-the-icons-p)
    (doom-modeline-version t)
    (doom-modeline-buffer-file-name-style 'file-name)
    :config
    (doom-modeline-mode t))

  (use-package hide-mode-line
    :defer t
    :after comint
    :hook
    ((comint-mode help-mode) . hide-mode-line-mode))
#+end_src

* Interface
** Splash Screen

#+begin_src emacs-lisp
  (setq-default inhibit-startup-screen t)
  (setq-default inhibit-startup-message t)
  (setq-default inhibit-startup-echo-area-message t)
  (setq-default initial-scratch-message nil)

  (use-package dashboard
    :if (display-graphic-p)
    :bind
    (:map dashboard-mode-map
          ("C-n" . widget-forward)
          ("C-p" . widget-backward))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    (dashboard-set-footer nil)
    (dashboard-set-heading-icons ign/use-all-the-icons-p)
    (dashboard-set-file-icons ign/use-all-the-icons-p)
    (dashboard-set-init-info t)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `((("" "" "Github"
         (lambda (&rest _) (browse-url-generic "https://github.com/Lgneous")))
        ("" "" "Configuration"
         (lambda (&rest _) (ign/edit-config)))
        ("" "" "Restart emacs"
         (lambda (&rest _) (ign/reload))))))
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Lines

#+begin_src emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (add-hook 'prog-mode-hook #'hl-line-mode))
#+end_src

** Line numbers

Use linum for versions <26, otherwise use the cleaner and faster builtin line-number package
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :defer t
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))

  (use-package linum
    :ensure nil
    :defer t
    :unless (>= emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))
#+end_src

** Scrolling

Makes scrolling slightly smoother
#+begin_src emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+end_src

** Confirmation messages

Disable yes-or-no-p, I like to live dangerously
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+end_src

** Bells

#+begin_src emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+end_src

** Parentheses

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package elec-pair
    :ensure nil
    :defer t
    :hook
    (prog-mode . electric-pair-mode))

  (show-paren-mode t)
#+end_src

** Files

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (:map dired-mode-map
          ("C-c" . wdired-change-to-wdired-mode)))
#+end_src

** Windows

#+begin_src emacs-lisp
  (setq-default split-width-threshold 0)
  (setq-default split-height-threshold nil)

  (global-set-key (kbd "M-o") #'other-window)
#+end_src

** Buffers

#+begin_src emacs-lisp
  (setq-default uniquify-buffer-name-style 'post-forward-angle-brackets)

  (global-set-key [remap save-buffer] #'ign/save-buffer)

  (use-package ibuffer
    :ensure nil
    :defer t
    :bind
    ("C-x C-b" . ibuffer))
#+end_src

* Bindings

Replace M-x, C-x, C-M-x with M-t, C-t, C-M-t respectively, this is because I use a dvorak layout, and X is very annoying to reach
#+begin_src emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key key-translation-map (kbd "M-x") (kbd "M-t"))
  (define-key key-translation-map (kbd "C-M-t") (kbd "C-M-x"))
  (define-key key-translation-map (kbd "C-M-x") (kbd "C-M-t"))
#+end_src

** Discoverability

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode t))
#+end_src

* Completion Frontend
** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :bind
    ([remap switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-wrap t)
    (ivy-action-wrap t)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    :config
    (ivy-mode t))

  (use-package counsel
    :after ivy
    :config
    (counsel-mode t)
    (setq-default ivy-initial-inputs-alist nil))

  (use-package swiper
    :after ivy
    :bind
    ("C-r" . swiper-isearch)
    (:map swiper-isearch-map
          ;; Required, bugged by default
          ("M-n" . ivy-next-history-element)))

  (use-package ivy-rich
    :after
    (ivy counsel swiper)
    :custom
    (ivy-rich-parse-remote-buffer nil)
    :config
    (ivy-rich-mode t)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

  (use-package ivy-posframe
    :after ivy
    :custom
    (ivy-posframe-parameters '((left-fringe . 5) (right-fringe . 5)))
    (ivy-posframe-height-alist '((counsel-find-file . 20)
                                 (t . 10)))
    (ivy-posframe-display-functions-alist '((counsel-M-x . ivy-posframe-display-at-frame-center)
                                            (counsel-find-file . ivy-posframe-display-at-frame-center)
                                            (counsel-projectile-find-file . ivy-posframe-display-at-frame-center)
                                            (t . nil)))
    ;; :custom-face
    ;; (ivy-posframe-border ((t (:background "#6272a4"))))
    :config
    (ivy-posframe-mode 1))

  ;; This will make counsel-M-x sort candidates by frequency
  (use-package smex)
#+end_src

* Editing

#+begin_src emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)

  (global-set-key [remap fill-paragraph] #'ign/fill-or-unfill)
  (global-set-key [remap kill-line] #'ign/kill-line-or-region)

  (use-package expand-region
    :defer t
    :bind
    ("C-=" . er/expand-region))

  (use-package hungry-delete
    :defer t
    :hook
    (prog-mode . global-hungry-delete-mode)
    :custom
    (hungry-delete-chars-to-skip " \t\f\v"))

  (use-package multiple-cursors
    :defer t
    :bind
    ("C-." . mc/mark-next-like-this)
    ("C-," . mc/mark-previous-like-this)
    ("C->" . mc/skip-to-next-like-this)
    ("C-<" . mc/skip-to-previous-like-this)
    ("C-c C-." . mc/mark-all-like-this)
    ("C-x SPC" . mc/edit-lines))

  (use-package avy
    :defer t
    :bind
    ("C-s" . avy-goto-char-timer)
    :custom
    (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))

  (use-package mwim
    :defer t
    :bind
    ("C-a" . mwim-beginning)
    ("C-e" . mwim-end))

  (use-package aggressive-indent
    :defer t)
#+end_src

* Programming Related
** Git

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :custom
    (magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
    :bind
    ("C-c g" . magit))

  (use-package vc-hooks
    :ensure nil
    :after magit
    :custom
    (vc-handled-backends nil))

  (use-package transient
    :defer t
    :after magit
    :config
    (transient-bind-q-to-quit))

  (use-package gitattributes-mode :defer t)
  (use-package gitignore-mode :defer t)
  (use-package gitconfig-mode :defer t)
#+end_src

** TRAMP

#+begin_src emacs-lisp
  (use-package tramp
    :ensure nil
    :defer t
    :custom
    (password-cache-expiry nil)
    :config
    (add-to-list 'tramp-methods
                 '("gssh"
                   (tramp-login-program "gcloud compute ssh")
                   (tramp-login-args (("%h")))
                   (tramp-async-args (("-q")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                                   ("-o" "UserKnownHostsFile=/dev/null")
                                   ("-o" "StrictHostKeyChecking=no")))
                   (tramp-default-port 22))))
#+end_src

** Terminals & Comint

#+begin_src emacs-lisp
  (use-package comint
    :ensure nil
    :bind
    (:map comint-mode-map
          ("C-l" . comint-clear-buffer)))
#+end_src

** Auto-Completion

#+begin_src emacs-lisp
  (use-package company
    :defer t
    :bind
    ("M-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    (company-backends nil)
    :config
    (global-company-mode t))
#+end_src

** Checkers/Linters

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook
    (prog-mode . flycheck-mode)
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :custom
    (flycheck-checkers nil)
    :config
    ;; Bad flycheck design, override the default fringe without having to redefine entire checker levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [#b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b11100111
       #b11100111
       #b11100111
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000]))
#+end_src

** Project Management

#+begin_src emacs-lisp
  (use-package projectile
    :defer t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom
    (projectile-project-search-path `(,ign/project-path))
    (projectile-indexing-method (if (memq system-type '(ms-dos windows-nt cygwin)) 'native 'alien))
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t))

  (use-package counsel-projectile
    :after
    (counsel projectile)
    :config
    (counsel-projectile-mode t))
#+end_src

** Languages
*** LSP

We set the LSP configuration that will be used for many other languages
#+begin_src emacs-lisp
  (use-package lsp-mode
    :defer t
    :bind
    (:map lsp-mode-map
          ([remap xref-find-definitions] . lsp-find-definition)
          ("C-c e" . lsp-rename)
          ("C-c f" . lsp-format-buffer))
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil)
    (lsp-enable-snippet nil)
    (lsp-auto-configure nil))

  (use-package lsp-clients
    :ensure nil
    :after lsp-mode)

  (use-package lsp-ui
    :after
    (doom-themes hl-line lsp-mode)
    :bind
    (:map lsp-mode-map
          ([remap xref-find-references] . lsp-ui-peek-find-references)
          ([remap flycheck-list-errors] . lsp-ui-flycheck-list))
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-doc-include-signature t)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-peek-always-show t)
    :config
    (set-face-background 'lsp-ui-doc-background (face-background 'hl-line)))

  (use-package company-lsp
    :after
    (company lsp-mode)
    :custom
    (company-lsp-cache-candidates t)
    (company-lsp-enable-snippet nil)
    :config
    (add-to-list 'company-backends 'company-lsp))
#+end_src

*** C/C++

Requires:
- [[https://clang.llvm.org/][clang]]
- [[https://lldb.llvm.org/][lldb]]
#+begin_src emacs-lisp
  (use-package cc-mode
    :ensure nil
    :defer t
    :hook
    ((c-mode c++-mode) . lsp)
    :custom
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package company-c-headers
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+end_src

*** Clojure

Requires:
- [[https://leiningen.org/][Leiningen]]
#+begin_src emacs-lisp
  (use-package clojure-mode
    :defer t
    :hook
    (clojure-mode . aggressive-indent-mode))

  (use-package cider
    :defer t
    :bind
    (:map cider-repl-mode-map
          ("C-l" . cider-repl-clear-buffer))
    :custom
    (cider-print-fn 'fipp)
    (cider-repl-display-help-banner nil)
    (cider-repl-pop-to-buffer-on-connect nil)
    (cider-repl-display-in-current-window nil)
    (cider-font-lock-dynamically t))

  (use-package elein
    :after clojure-mode)
#+end_src

*** Common Lisp

Requires:
- [[http://www.sbcl.org/][sbcl]]
#+begin_src emacs-lisp
  (use-package slime
    :defer t
    :hook
    (slime-lisp-mode . aggressive-indent-mode)
    :bind
    (:map slime-repl-mode-map
          ("C-l" . slime-repl-clear-buffer))
    :custom
    (inferior-lisp-program "sbcl")
    (slime-contribs '(slime-fancy)))
#+end_src

*** Jupyter

Requires:
- [[https://www.python.org/][Python3]]
- [[https://jupyter.org/][Jupyter]]
#+begin_src emacs-lisp
  (use-package ein
    :defer t
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+end_src

*** OCaml

Requires
- [[https://ocaml.org/][ocaml]]
- [[https://github.com/ocaml/merlin][ocamlmerlin]]
#+begin_src emacs-lisp
  (use-package tuareg
    :defer t
    :hook
    (tuareg-mode . lsp)
    :mode
    (("\\.ml[ip]?\\'" . tuareg-mode)
     ("\\.mly\\'" . tuareg-menhir-mode)
     ("[./]opam_?\\'" . tuareg-opam-mode)
     ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
     ("\\.eliomi?\\'" . tuareg-mode))
    :custom
    (tuareg-match-patterns-aligned t)
    (tuareg-indent-align-with-first-arg t))
#+end_src

*** Python

Requires:
- [[https://www.python.org/][Python3]]
- [[https://github.com/palantir/python-language-server][pyls]]
#+begin_src emacs-lisp
  (use-package pip-requirements
    :defer t
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package python
    :ensure nil
    :defer t
    :hook
    (python-mode . lsp)
    :custom
    (python-indent 4)
    (python-shell-interpreter ign/python-interactive)
    ;; Required for MacOS, prevents newlines from being displayed as ^G
    (python-shell-interpreter-args (if (eq system-type 'darwin) "-c exec('__import__(\\'readline\\')') -i" "-i"))
    (python-fill-docstring-style 'pep-257)
    (py-split-window-on-execute t))

  (use-package pyvenv
    :after python
    :hook
    (python-mode . pyvenv-mode))

  (use-package sphinx-doc
    :after python
    :hook
    (python-mode . sphinx-doc-mode))

  (use-package isortify
    :after python)
#+end_src

*** R & Julia

Requires:
- [[https://julialang.org/][Julia]]
- [[https://www.r-project.org/][R]]
#+begin_src emacs-lisp
  (use-package ess
    :defer t
    :mode
    ("\\.jl\\'" . ess-julia-mode)
    ("\\.[rR]\\'" . ess-r-mode))
#+end_src

* Writing/Documentation
** Org

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :mode
    ("\\.org\\'" . org-mode)
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-hide-emphasis-markers t)
    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "python3 -i")
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+begin_src emacs-lisp\n?\n#+end_src")))

  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bullets
    :after org
    :hook
    (org-mode . org-bullets-mode))
#+end_src

** TeX

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :mode
    ("\\.tex\\'" . latex-mode)
    :custom
    (TeX-source-correlate-mode t)
    (TeX-source-correlate-method 'synctex)
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-view-program-selection '((output-pdf "PDF Tools")) TeX-source-correlate-start-server t)
    :config
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

  (use-package auctex-latexmk
    :after tex
    :custom
    (auctex-latexmk-inherit-TeX-PDF-mode t)
    :config
    (auctex-latexmk-setup))

  (use-package reftex
    :after tex
    :hook
    (LaTeX-mode . reftex-mode)
    :custom
    (reftex-plug-into-AUCTeX t)
    (reftex-cite-prompt-optional-args t))

  (use-package company-auctex
    :after
    (tex company)
    :config
    (company-auctex-init))
#+end_src

** PDF

Run ~M-x pdf-tools-install~ the first time
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :after tex
    :if (eq system-type 'gnu/linux)
    :mode
    ("\\.pdf\\'" . pdf-view-mode)
    :bind
    (:map pdf-view-mode-map
          ("C-s" . isearch-forward)
          ("C-r" . isearch-backward))
    :custom
    (pdf-view-display-size 'fit-page)
    (pdf-annot-activate-created-annotations t))
#+end_src

* Community
** Discord

#+begin_src emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode t))
#+end_src

** Key Frequency

#+begin_src emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-autosave-mode t)
    (keyfreq-mode t))
#+end_src
