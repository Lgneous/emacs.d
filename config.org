#+TITLE: Literate emacs configuration
* Personal Informations

#+BEGIN_SRC emacs-lisp
(setq-default user-full-name "Julien Chedal-Anglay"
              user-mail-address "chedala.julien@gmail.com")
#+END_SRC

* Encoding

#+BEGIN_SRC emacs-lisp
(setq-default locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+BEGIN_SRC emacs-lisp
(setq-default backup-inhibited t
              auto-save-default nil
              create-lockfiles nil
              make-backup-files nil)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq-default use-package-always-ensure t)
#+END_SRC

* Custom Variables

#+BEGIN_SRC emacs-lisp
(defconst custom-file "/dev/zero")
#+END_SRC

* System
** MacOS

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
(set-frame-font (if (memq window-system '(mac ns)) "Menlo-16" "FiraCode-12") nil t)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (doom-themes-org-config)
  (load-theme 'doom-vibrant t))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)

(use-package doom-modeline
  :hook (after-init . doom-modeline-init)
  :custom
  (doom-modeline-python-executable "python3.7")
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t))
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-startup-banner 'logo)
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** Scratch buffer

#+BEGIN_SRC emacs-lisp
(setq-default initial-major-mode 'python-mode
	      initial-scratch-message "\
# This buffer is for notes you don't want to save, and for Ruby code.
# If you want to create a file, visit that file with C-x C-f,
# then enter the text in that file's own buffer.")
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
(setq-default transient-mark-mode t
              visual-line-mode t)

(global-hl-line-mode 1)

(use-package linum
  :hook (prog-mode . linum-mode)
  :custom
  (linum-format " %d ")
  :config
  (set-face-underline 'linum nil))
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
(setq-default scroll-margin 0
              scroll-conservatively 10000
              scroll-preserve-screen-position t
              mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p (lambda (&rest _) t))
(setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
(setq-default visible-bell nil
              audible-bell nil
              ring-bell-function 'ignore)
#+END_SRC

* Completion Frontend

#+BEGIN_SRC emacs-lisp
(use-package ivy :demand
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d "))
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
(defun ign/split-window-right ()
  (interactive)
  (split-window-right)
  (balance-windows))

(defun ign/kill-and-balance-window ()
  (interactive)
  (if (= (length (get-buffer-window-list (current-buffer))) 1)
     (kill-buffer-and-window)
    (delete-window))
  (balance-windows))

(defun ign/popwin-ansi-term (name)
  (popwin:display-buffer-1
   (or (get-buffer name)
       (save-window-excursion
         (ansi-term "zsh" name)))
   :default-config-keywords '(:height 20 :position :bottom :noselect nil :stick t)))

(defun ign/term-toggle ()
  (interactive)
  (if (get-buffer "*term*")
     (progn (switch-to-buffer "*term*")
            (kill-buffer-and-window))
    (ign/popwin-ansi-term "term")))
#+END_SRC

* Buffers
** IBuffer

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ("C-x b" . ibuffer))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :custom
  (org-src-fontify-natively t))
#+END_SRC

* Programming

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :config
  (require 'smartparens-config))

(show-paren-mode t)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :custom
  (magit-completing-read-function 'ivy-completing-read))

(use-package gitignore-mode
  :mode ("\\.gitignore\\'" . gitignore-mode))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand
  :bind
  (:map projectile-mode-map
   ("C-c p" . projectile-command-map))
  :config
  (projectile-mode t))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
(use-package company
  :demand
  :custom-face
  (company-tooltip ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-tooltip-annotation ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-tooltip-selection ((t (:foreground "#ABB2BF" :background "#393F49"))))
  (company-tooltip-mouse ((t (:background "#30343C"))))
  (company-tooltip-common ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-tooltip-common-selection ((t (:foreground "#ABB2BF" :background "#393F49"))))
  (company-preview ((t (:background "#30343C"))))
  (company-preview-common ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-scrollbar-fg ((t (:background "#30343C"))))
  (company-scrollbar-bg ((t (:background "#30343C"))))
  (company-template-field ((t (:foreground "#282C34" :background "#C678DD"))))
  :custom
  (company-idle-delay 120)
  :config
  (global-company-mode t))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :custom-face
  (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
  (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
  (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save))
  :config
  (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
    (vector #b00000000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00111000
	    #b01111100
	    #b11111110
	    #b11111110
	    #b11111110
	    #b01111100
	    #b00111000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00000000))
  (flycheck-define-error-level 'info
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-info
    :info-list-face 'flycheck-error-list-info)
  (flycheck-define-error-level 'warning
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-warning
    :warning-list-face 'flycheck-error-list-warning)
  (flycheck-define-error-level 'error
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-error
    :error-list-face 'flycheck-error-list-error)
  (global-flycheck-mode t))
#+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
(use-package python
  :after (flycheck)
  :ensure nil
  :custom
  (python-indent 4)
  (python-shell-interpreter "ipython3")
  (python-shell-interpreter-args "--simple-prompt -i")
  (python-fill-docstring-style 'pep-257)
  (py-split-window-on-execute t)
  (flycheck-python-pylint-executable "python3.7")
  (flycheck-python-pycompile-executable "python3.7"))

(use-package company-jedi
  :after company
  :hook (python-mode . jedi-setup)
  :demand
  :config
  (add-to-list 'company-backends 'company-jedi))

(use-package pip-requirements)
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :mode ("\\.mly\\'" . tuareg-menhir-mode)
  :custom
  (tuareg-match-patterns-aligned t)
  (tuareg-indent-align-with-first-arg t))

(use-package merlin
  :hook (tuareg-mode . merlin-mode)
  :config
  (when (file-exists-p "~/.emacs.d/opam-user-setup.el")
   (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")))
#+END_SRC

** C

#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure nil
  :hook
  (c-mode . (lambda () (setq indent-tabs-mode t)
	      (global-aggressive-indent-mode -1)))
  :custom
  (c-default-style "linux")
  (c-basic-offset 4))

(use-package company-c-headers
  :after company
  :config
  (add-to-list 'company-backends 'company-c-headers))
#+END_SRC

* Text Editing

#+BEGIN_SRC emacs-lisp
(use-package expand-region)

(setq-default require-final-newline t)
(global-subword-mode 1)
(delete-selection-mode t)
(add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC

* Text Navigation

#+BEGIN_SRC emacs-lisp
(use-package popwin)

(use-package avy
  :custom
  (avy-keys '(?u ?h ?e ?t ?o ?n ?a ?s))
  :bind
  ("C-'" . 'avy-goto-char-2))

(use-package ace-window
  :custom
  (aw-keys '(?u ?h ?e ?t ?o ?n ?a ?s))
  :bind
  ("C-x C-w" . 'ace-window))

(use-package ace-jump-helm-line
  :bind
  (:map helm-map
   ("C-'" . 'ace-jump-helm-line)))
#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp
(define-key key-translation-map (kbd "C-t") (kbd "C-x"))
(define-key key-translation-map (kbd "C-x") (kbd "C-t"))
(define-key key-translation-map (kbd "M-t") (kbd "M-x"))
(define-key key-translation-map (kbd "M-x") (kbd "M-t"))

(use-package bind-key)
(bind-key* "C-x m" 'previous-buffer)
(bind-key* "C-x v" 'next-buffer)
(bind-key* "C-x w" 'ign/split-window-right)
(bind-key* "C-x k" 'ign/kill-and-balance-window)
(bind-key* "C-x t" 'ign/term-toggle)
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand
  :bind ("C-h b" . which-key-show-top-level)
  :config
  (which-key-mode))
#+END_SRC

* Community
** Browser

#+BEGIN_SRC emacs-lisp
(setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
(use-package elcord
  :demand
  :config
  (elcord-mode))
#+END_SRC
