* Personal Informations

#+begin_src emacs-lisp
(setq-default user-full-name "Julien Chedal-Anglay"
              user-mail-address "chedala.julien@gmail.com")
#+end_src

* Encoding

#+BEGIN_SRC emacs-lisp
(setq-default locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Backups

#+begin_src emacs-lisp
(setq-default backup-inhibited t
              auto-save-default nil
              create-lockfiles nil
              make-backup-files nil)
#+end_src

* Packages

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq-default use-package-always-ensure t)
#+end_src

* Custom Variables

#+begin_src emacs-lisp
(defconst custom-file "/dev/zero")
#+end_src

* GUI

#+begin_src emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+end_src

* Interface
** Lines

#+begin_src emacs-lisp
(setq-default transient-mark-mode t
              visual-line-mode t
              truncate-lines nil
              column-number-mode t)

(global-hl-line-mode 1)

(use-package linum
  :hook (prog-mode . linum-mode)
  :custom
  (linum-format " %d ")
  :config
  (set-face-underline 'linum nil))
#+end_src

** Status bar

#+begin_src emacs-lisp
(line-number-mode t)
(column-number-mode t)

(use-package doom-modeline
  :hook (after-init . doom-modeline-init)
  :custom
  (doom-modeline-python-executable "python3.7")
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  :config
  (doom-modeline-def-segment xah-fly-keys ()
    "The current xah-fly-keys state."
    (when (boundp 'xah-fly-insert-state-q)
      (if xah-fly-insert-state-q
          (propertize " <I> " 'face (if (doom-modeline--active) 'doom-modeline-evil-insert-state))
        (propertize " <C> " 'face (if (doom-modeline--active) 'doom-modeline-evil-normal-state))))))
#+end_src

** Cursor

#+begin_src emacs-lisp
(setq-default cursor-type 'box)
(blink-cursor-mode -1)
#+end_src

** Parentheses

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package smartparens
  :config (require 'smartparens-config)
  :hook (prog-mode . smartparens-mode))

(show-paren-mode t)
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq-default scroll-margin 0
              scroll-conservatively 10000
              scroll-preserve-screen-position t
              mouse-wheel-progressive-speed nil)
#+end_src

** Confirmation messages

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq-default confirm-kill-emacs nil)
#+end_src

** Scratch buffer

#+begin_src emacs-lisp
(setq-default initial-major-mode 'fundamental-mode
	      initial-scratch-message nil)
#+end_src

** Bells

#+begin_src emacs-lisp
(setq-default visible-bell nil
              audible-bell nil
              ring-bell-function 'ignore)
#+end_src

** Misc

#+begin_src emacs-lisp
(global-subword-mode 1)
(delete-selection-mode t)
(setq-default require-final-newline t)
(add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src

* Selection

#+begin_src emacs-lisp
(use-package expand-region)
#+end_src

* Welcome screen

#+begin_src emacs-lisp
(use-package dashboard
  :custom
  (dashboard-startup-banner 'logo)
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Appearance
** Font

#+begin_src emacs-lisp
(set-frame-font (if (memq window-system '(mac ns)) "Menlo-16" "FiraCode-12") nil t)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :custom-face
  (helm-ff-directory ((t (:foreground "#5CEFFF"))))
  :config
  (doom-themes-org-config)
  (load-theme 'doom-vibrant t))
#+end_src

* System
** MacOS

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
#+end_src

* Git

#+begin_src emacs-lisp
(use-package magit)
#+end_src

* Helm

#+begin_src emacs-lisp
(use-package helm
  :bind
  (:map helm-map
   ("<escape>" . keyboard-escape-quit)
   ("<tab>" . helm-next-line)
   ("<backtab>" . helm-previous-line))
  :custom
  (helm-boring-file-regexp-list '("\\.$" "\\.git*." "\\.o" "\\.a$" "\\.pyc$" "\\.pyo$" "/Library/?" "/Applications/?"))
  (helm-display-header-line nil)
  :config
  (helm-mode t))

#+end_src
* Project Managing

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode t))

(use-package helm-projectile
  :after (projectile helm)
  :config
  (projectile-mode t))
#+end_src

* Translations

#+begin_src emacs-lisp
(define-key key-translation-map (kbd "TAB") (kbd "<tab>"))
(define-key key-translation-map (kbd "S-TAB") (kbd "<backtab>"))
(define-key key-translation-map (kbd "ESC") (kbd "<escape>"))
#+end_src

* Bindings

#+begin_src emacs-lisp
(use-package xah-fly-keys
  :demand
  :bind
  (("<escape>" . xah-fly-command-mode-activate)
   :map xah-fly-leader-key-map
   ("SPC" . helm-mini)
   ("j" . save-buffer)
   ("k" . helm-find-files)
   ("m" . previous-buffer)
   ("q" . kill-buffer-and-window)
   ("v" . next-buffer)
   ("w" . split-window-right)
   ("y" . er/expand-region))
  :custom
  (xah-fly-use-control-key nil)
  (xah-fly-use-meta-key nil)
  :config
  (xah-fly-keys 1))
#+end_src

* Completion

#+begin_src emacs-lisp
(use-package company
  :demand
  :bind
  (("S-SPC" . company-complete)
   :map company-active-map
   ("S-SPC" . company-abort)
   ("<tab>" . company-select-next)
   ("<backtab>" . company-select-previous))
  :custom-face
  (company-tooltip ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-tooltip-annotation ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-tooltip-selection ((t (:foreground "#ABB2BF" :background "#393F49"))))
  (company-tooltip-mouse ((t (:background "#30343C"))))
  (company-tooltip-common ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-tooltip-common-selection ((t (:foreground "#ABB2BF" :background "#393F49"))))
  (company-preview ((t (:background "#30343C"))))
  (company-preview-common ((t (:foreground "#ABB2BF" :background "#30343C"))))
  (company-scrollbar-fg ((t (:background "#30343C"))))
  (company-scrollbar-bg ((t (:background "#30343C"))))
  (company-template-field ((t (:foreground "#282C34" :background "#C678DD"))))
  :custom
  (company-idle-delay 120)
  :config
  (global-company-mode t))
#+end_src

* Checkers

#+begin_src emacs-lisp
(use-package flycheck
  :custom-face
  (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
  (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
  (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save))
  :config
  (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
    (vector #b00000000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00111000
	    #b01111100
	    #b11111110
	    #b11111110
	    #b11111110
	    #b01111100
	    #b00111000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00000000
	    #b00000000))
  (flycheck-define-error-level 'info
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-info
    :info-list-face 'flycheck-error-list-info)
  (flycheck-define-error-level 'warning
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-warning
    :warning-list-face 'flycheck-error-list-warning)
  (flycheck-define-error-level 'error
    :severity 100
    :compilation-level 2
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'flycheck-fringe-bitmap-ball
    :fringe-face 'flycheck-fringe-error
    :error-list-face 'flycheck-error-list-error)
  (global-flycheck-mode t))
#+end_src

* General Programming

#+begin_src emacs-lisp
(use-package aggressive-indent
  :config
  (global-aggressive-indent-mode 1))
#+end_src

* Org

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :custom
  (org-src-fontify-natively t))
#+end_src

* Python

#+begin_src emacs-lisp
(use-package python
  :after (flycheck)
  :ensure nil
  :custom
  (python-indent 4)
  (python-shell-interpreter "ipython3")
  (python-shell-interpreter-args "--simple-prompt -i")
  (flycheck-python-pylint-executable "python3.7")
  (flycheck-python-pycompile-executable "python3.7"))

(use-package company-jedi
  :after company
  :hook (python-mode . jedi-setup)
  :demand
  :config
  (add-to-list 'company-backends 'company-jedi))
#+end_src

* OCaml

#+begin_src emacs-lisp
(use-package tuareg
  :mode ("\\.mly\\'" . tuareg-menhir-mode)
  :custom
  (tuareg-match-patterns-aligned t)
  (tuareg-indent-align-with-first-arg t))

(use-package merlin
  :hook (tuareg-mode . merlin-mode)
  :config
  (when (file-exists-p "~/.emacs.d/opam-user-setup.el")
   (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")))
#+end_src

* C

#+begin_src emacs-lisp
(use-package cc-mode
  :ensure nil
  :hook
  (c-mode . (lambda () (setq indent-tabs-mode t)
	      (global-aggressive-indent-mode -1)))
  :custom
  (c-default-style "linux")
  (c-basic-offset 4))

(use-package company-c-headers
  :after company
  :config
  (add-to-list 'company-backends 'company-c-headers))
#+end_src

* Community
** Browser

#+begin_src emacs-lisp
(setq-default browse-url-browser-function 'browse-url-chromium)
#+end_src

** Discord

#+begin_src emacs-lisp
(use-package elcord
  :demand t
  :config
  (elcord-mode))
#+end_src
