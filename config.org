* Table of Contents                                                     :TOC:
- [[#initialization][Initialization]]
- [[#packages][Packages]]
- [[#backups][Backups]]
- [[#encoding][Encoding]]
- [[#functions][Functions]]
- [[#custom-variables][Custom Variables]]
- [[#system][System]]
  - [[#shell-path][Shell Path]]
  - [[#version-specific][Version-specific]]
- [[#gui][GUI]]
- [[#appearance][Appearance]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
- [[#interface][Interface]]
  - [[#splash-screen][Splash Screen]]
  - [[#lines][Lines]]
  - [[#line-numbers][Line numbers]]
  - [[#scrolling][Scrolling]]
  - [[#confirmation-messages][Confirmation messages]]
  - [[#bells][Bells]]
  - [[#terminal][Terminal]]
  - [[#parentheses][Parentheses]]
- [[#bindings][Bindings]]
  - [[#which-key][Which-key]]
- [[#completion-frontend][Completion Frontend]]
  - [[#ivy][Ivy]]
- [[#editing][Editing]]
- [[#navigation][Navigation]]
- [[#programming-related][Programming Related]]
  - [[#git][Git]]
  - [[#tramp][TRAMP]]
  - [[#auto-completion][Auto-Completion]]
  - [[#checkerslinters][Checkers/Linters]]
  - [[#project-management][Project Management]]
  - [[#languages][Languages]]
- [[#writingdocumentation][Writing/Documentation]]
  - [[#org][Org]]
- [[#community][Community]]
  - [[#browser][Browser]]
  - [[#discord][Discord]]
  - [[#key-frequency][Key Frequency]]

* Initialization

Add lexical binding support
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Packages

Set up package.el and use-package for later use, disable implicit lazy-loading
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; Hotfix, requires in emacs 26.1 due to bug #34341
  ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (when (file-directory-p (concat user-emacs-directory "elpa-mirror"))
      (setq-default package-archives `(("melpa" . ,(concat user-emacs-directory "elpa-mirror/melpa"))
                                       ("gnu" . ,(concat user-emacs-directory "elpa-mirror/gnu"))
                                       ("org" . ,(concat user-emacs-directory "elpa-mirror/org"))
                                       ("melpa-stable" . ,(concat user-emacs-directory "elpa-mirror/stable-melpa")))))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq-default use-package-always-defer nil)
  (setq-default use-package-always-demand t)
  (setq-default use-package-always-ensure t)
  (setq-default byte-compile-warnings nil)

  ;; Useful to speed up start-up time
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+END_SRC

* Backups

I don't want any kind of backup, this is mostly due to saving being compulsory to me.
#+BEGIN_SRC emacs-lisp
  (setq-default backup-inhibited t
                auto-save-default nil
                create-lockfiles nil
                make-backup-files nil)
#+END_SRC

* Encoding

#+BEGIN_SRC emacs-lisp
  (setq-default locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
  (defun ign/after (to-call-after f)
    "Run F then run TO-CALL-AFTER."
    (funcall f)
    (funcall to-call-after))

  (defun ign/split-window-right ()
    "Create a new window split to the right and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'split-window-right))

  (defun ign/split-window-below ()
    "Create a new window split below and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'split-window-below))

  (defun ign/delete-window ()
    "Delete the current window and balance the windows."
    (interactive)
    (ign/after #'balance-windows #'delete-window))

  (defun ign/fill-or-unfill ()
    "Fill or unfill based on the previous command."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'ign/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (defun ign/refresh-buffer ()
    "Refresh the current buffer."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (defun ign/reload ()
    "Reload the configuration file."
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun ign/edit-config ()
    "Open the configuration file in the current buffer."
    (interactive)
    (find-file ign/config-path))

  (defun ign/first-occurence (predicate list)
    "Return the first occurence in LIST which, when applied to PREDICATE returns t."
    (let ((head (car list))
          (tail (cdr list)))
      (if (or (not head) (funcall predicate head))
          head
        (ign/first-occurence predicate tail))))

  (defmacro ign/find-executables (&rest list)
    "Return the first occurence in LIST whose value corresponds to an executable."
    (ign/first-occurence #'executable-find list))

  (defun ign/save-buffer (arg)
    "Save the current buffer and remove trailing whitespace unless called interactively."
    (interactive "p")
    (when (/= arg 1)
      (delete-trailing-whitespace))
    (save-buffer))

  (defun ign/kill-line-or-region (arg)
    "Cut selection or, if no selection, cut cursor line."
    (interactive "p")
    (if (region-active-p)
        (call-interactively #'kill-region)
      (kill-visual-line (if (= arg 1) nil arg))))

  (defun ign/bol (arg)
    (interactive "p")
    (if (= arg 1)
        (beginning-of-visual-line)
      (back-to-indentation)))

  (defun ign/eol (arg)
    (interactive "p")
    (if (= arg 1)
        (end-of-visual-line)
      (progn
        (move-end-of-line nil)
        (re-search-backward "^\\|[^[:space:]]")
        (if (not (looking-at-p "[[:space:]]"))
            (right-char)))))
#+END_SRC

* Custom Variables

#+BEGIN_SRC emacs-lisp
  (defconst ign/config-path (concat user-emacs-directory "config.org"))
  (defconst ign/os (or (alist-get system-type '((gnu . *nix) (gnu/linux . *nix) (gnu/kfreebsd . *nix) (darwin . macos) (ms-dos . win) (windows-nt . win) (cygwin . win))) '*nix))
  (defconst ign/python-executable "python3")
  (defconst ign/use-all-the-icons-p (memq ign/os '(*nix macos)))
  (when (memq ign/os '(*nix macos))
    (setq-default custom-file "/dev/zero"))
#+END_SRC

* System
** Shell Path

This was originally used for MacOS only, but ended being useful for various tools that require on a shell to run
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq ign/os '(*nix macos))
    :config
    (exec-path-from-shell-initialize))

  (when (memq ign/os '(macos))
    (setq mac-command-modifier 'meta))
#+END_SRC

** Version-specific

#+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 26)
    (setq-default confirm-kill-processes nil))
#+END_SRC

* GUI

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (menu-bar-mode 0)
    (toggle-scroll-bar 0)
    (tool-bar-mode 0))
#+END_SRC

* Appearance
** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font
   (pcase ign/os
     ('*nix "Inconsolata")
     ('macos "Menlo")
     (_ "Consolas")))
#+END_SRC

Fancy icons from font-awesome, material-icons, ...
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (and ign/use-all-the-icons-p (display-graphic-p)))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (doom-themes-org-config)
    (load-theme 'doom-one t)
    (set-face-attribute 'org-level-1 nil :background (face-background 'default) :height 1.0))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)

  (use-package doom-modeline
    :if (display-graphic-p)
    :custom
    (doom-modeline-python-executable ign/python-executable)
    (doom-modeline-icon ign/use-all-the-icons-p)
    (doom-modeline-major-mode-icon ign/use-all-the-icons-p)
    (doom-modeline-version t)
    (doom-modeline-buffer-file-name-style 'file-name)
    :config
    (doom-modeline-mode t))
#+END_SRC

* Interface
** Splash Screen

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :if (display-graphic-p)
    :bind
    (:map dashboard-mode-map
          ("C-n" . widget-forward)
          ("C-p" . widget-backward))
    :custom
    (dashboard-banner-logo-title
     (format ""
             (float-time (time-subtract after-init-time before-init-time))
             (length package-activated-list) gcs-done))
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    (dashboard-set-footer nil)
    (dashboard-set-heading-icons ign/use-all-the-icons-p)
    (dashboard-set-file-icons ign/use-all-the-icons-p)
    (dashboard-set-init-info t)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `((("" "Github" "Github"
         (lambda (&rest _) (browse-url-generic "https://github.com/Lgneous")))
        ("" "Configuration" "Configuration"
         (lambda (&rest _) (ign/edit-config)))
        ("" "Reload" "Restart emacs"
         (lambda (&rest _) (ign/reload))))))
    (dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Lines

#+BEGIN_SRC emacs-lisp
  (setq-default transient-mark-mode t
                visual-line-mode t
                indent-tabs-mode nil
                tab-width 4)

  (when (display-graphic-p)
    (add-hook 'prog-mode-hook #'hl-line-mode))
#+END_SRC

** Line numbers

Use linum for versions <26, otherwise use the cleaner and faster builtin line-number package
#+BEGIN_SRC emacs-lisp
  (use-package linum
    :ensure nil
    :if (< emacs-major-version 26)
    :hook
    (prog-mode . linum-mode)
    :custom
    (linum-format " %d ")
    :config
    (set-face-underline 'linum nil))

  (use-package display-line-numbers
    :ensure nil
    :if (>= emacs-major-version 26)
    :hook
    (prog-mode . display-line-numbers-mode)
    :custom
    (display-line-numbers-type 'relative)
    (display-line-numbers-current-absolute t)
    (display-line-numbers-width 2)
    (display-line-numbers-widen t))
#+END_SRC

** Scrolling

Makes scrolling slightly smoother
#+BEGIN_SRC emacs-lisp
  (setq-default scroll-margin 0
                scroll-conservatively 10000
                scroll-preserve-screen-position t
                mouse-wheel-progressive-speed nil)
#+END_SRC

** Confirmation messages

Disable yes-or-no-p, I like to live dangerously
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p (lambda (&rest _) t))
  (setq-default confirm-kill-emacs nil)
#+END_SRC

** Bells

#+BEGIN_SRC emacs-lisp
  (setq-default visible-bell nil
                audible-bell nil
                ring-bell-function 'ignore)
#+END_SRC

** Terminal

Uses the term-toggle package in =site-lisp/term-toggle=
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :custom
    (multi-term-program (ign/find-executables "zsh" "bash" "sh")))

  (use-package popwin)

  (use-package term-toggle
    :after popwin
    :load-path "site-lisp/term-toggle"
    :custom
    (term-toggle-pos :bottom)
    (term-toggle-size 15)
    (term-toggle-function #'multi-term)
    (term-toggle-args '())
    :bind
    ("C-c t" . term-toggle))
#+END_SRC

** Parentheses

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package elec-pair
    :ensure nil
    :hook
    (prog-mode . electric-pair-mode))

  (show-paren-mode t)
#+END_SRC

* Bindings

Replace M-x, C-x, C-M-x with M-t, C-t, C-M-t respectively, this is because I use a dvorak layout, and X is very annoying to reach
#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
  (define-key key-translation-map (kbd "M-t") (kbd "M-x"))
  (define-key key-translation-map (kbd "M-x") (kbd "M-t"))
  (define-key key-translation-map (kbd "C-M-t") (kbd "C-M-x"))
  (define-key key-translation-map (kbd "C-M-x") (kbd "C-M-t"))

  (define-key comint-mode-map (kbd "C-l") #'comint-clear-buffer)

  (use-package bind-key)
  (bind-key* "C-x C-s" #'ign/save-buffer)
  (bind-key* "C-a" #'ign/bol)
  (bind-key* "C-e" #'ign/eol)
  (bind-key* "C-k" #'ign/kill-line-or-region)
  (use-package hydra)
  (use-package key-chord
    :custom
    (key-chord-two-keys-delay 0.03)
    :config
    (key-chord-mode t))
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode t))
#+END_SRC

* Completion Frontend
** Ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :bind
    ([switch-to-buffer] . ivy-switch-buffer)
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done)
          ("C-r" . ivy-previous-line)
          ("C-s" . ivy-next-line))
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "%d/%d ")
    (ivy-height 20)
    (ivy-display-style 'fancy)
    (ivy-format-function 'ivy-format-function-line)
    (ivy-wrap t)
    (ivy-action-wrap t)
    (ivy-re-builders-alist
     '((t . ivy--regex-plus)))
    :config
    (ivy-mode t))

  (use-package counsel
    :after ivy
    :config
    (counsel-mode t))

  (use-package swiper
    :after ivy
    :bind
    ("C-r" . swiper-isearch-backward)
    ("C-s" . swiper-isearch)
    (:map swiper-isearch-map
          ;; Required, bugged by default
          ("M-n" . ivy-next-history-element)))

  ;; This will make counsel-M-x sort candidates by frequency
  (use-package smex)
#+END_SRC

* Editing

#+BEGIN_SRC emacs-lisp
  (setq-default require-final-newline t)
  (global-subword-mode t)
  (delete-selection-mode t)

  (global-set-key [remap fill-paragraph] #'ign/fill-or-unfill)

  (use-package expand-region
    :defer t
    :bind
    ("C-=" . er/expand-region))

  (use-package multiple-cursors
    :defer t
    :bind
    ("C-." . mc/mark-next-like-this)
    ("C-," . mc/mark-previous-like-this)
    ("C->" . mc/skip-to-next-like-this)
    ("C-<" . mc/skip-to-previous-like-this)
    ("C-c C-." . mc/mark-all-like-this)
    ("C-x SPC" . mc/edit-lines))

  (use-package aggressive-indent
    :defer t)

  (use-package yasnippet
    :defer t
    :bind
    (:map yas-minor-mode-map
          ("C-M-/" . yas-expand)
          ("TAB" . nil)))

  (use-package yasnippet-snippets)
#+END_SRC

* Navigation

#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :bind
    ("C-c j" . imenu-list-smart-toggle))
#+END_SRC

* Programming Related
** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind
    ("C-c g" . magit))

  (use-package gitignore-mode
    :mode "\\.gitignore\\'")

  (use-package gitconfig-mode
    :mode "\\.gitconfig\\'")
#+END_SRC

** TRAMP

#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :ensure nil
    :custom
    (password-cache-expiry nil)
    :config
    (add-to-list 'tramp-methods
                 '("gssh"
                   (tramp-login-program "gcloud compute ssh")
                   (tramp-login-args (("%h")))
                   (tramp-async-args (("-q")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-gw-args (("-o" "GlobalKnownHostsFile=/dev/null")
                                   ("-o" "UserKnownHostsFile=/dev/null")
                                   ("-o" "StrictHostKeyChecking=no")))
                   (tramp-default-port 22))))
#+END_SRC

** Auto-Completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    ("M-/" . company-complete)
    (:map company-active-map
          ("M-/" . company-other-backend)
          ("M-n" . nil)
          ("M-p" . nil)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :custom
    (company-require-match 'never)
    (company-dabbrev-downcase nil)
    (company-tooltip-align-annotations t)
    (company-idle-delay 128)
    (company-minimum-prefix-length 128)
    (company-backends nil)
    :config
    (global-company-mode t))
#+END_SRC

** Checkers/Linters

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :custom-face
    (flycheck-info ((t (:underline (:style line :color "#80FF80")))))
    (flycheck-warning ((t (:underline (:style line :color "#FF9933")))))
    (flycheck-error ((t (:underline (:style line :color "#FF5C33")))))
    (flycheck-check-syntax-automatically '(mode-enabled save))
    :custom
    (flycheck-checkers nil)
    :config
    ;; (add-to-list 'flycheck-disabled-checkers 'python-flake8)
    ;; (add-to-list 'flycheck-disabled-checkers 'python-mypy)
    ;; (add-to-list 'flycheck-disabled-checkers 'python-pylint)
    ;; (add-to-list 'flycheck-disabled-checkers 'python-pycompile)
    ;; (add-to-list 'flycheck-disabled-checkers 'c/c++-gcc)
    ;; (add-to-list 'flycheck-disabled-checkers 'c/c++-clang)
    ;; (add-to-list 'flycheck-disabled-checkers 'c/c++-cppcheck)
    (global-flycheck-mode t)
    ;; Bad flycheck design, override the default fringe without having to redefine entire checker levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [#b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b11100111
       #b11100111
       #b11100111
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000
       #b00000000]))
#+END_SRC

** Project Management

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map))
    :custom
    (projectile-project-search-path '("~/Projects/"))
    (projectile-indexing-method (if (eq ign/os 'win) 'native 'alien))
    (projectile-sort-order 'access-time)
    (projectile-enable-caching t)
    (projectile-require-project-root t)
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode t))

  (use-package counsel-projectile
    :after
    (counsel projectile)
    :config
    (counsel-projectile-mode t)
    (defalias 'projectile-switch-to-buffer 'counsel-projectile-switch-to-buffer)
    (defalias 'projectile-find-dir 'counsel-projectile-find-dir)
    (defalias 'projectile-find-file 'counsel-projectile-find-file)
    (defalias 'projectile-grep 'counsel-projectile-grep)
    (defalias 'projectile-switch-project 'counsel-projectile-switch-project))
#+END_SRC

** Languages
*** LSP

We set the LSP configuration that will be used for many other languages
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :after company
    :bind
    (:map lsp-mode-map
          ([remap xref-find-definitions] . lsp-find-definition)
          ("C-c e" . lsp-rename)
          ("C-c f" . lsp-format-buffer))
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil)
    (lsp-enable-snippet nil)
    :config
    (add-to-list 'company-backends 'company-lsp))

  (use-package lsp-ui
    :after
    (doom-themes hl-line imenu-list lsp-mode)
    :bind
    (:map lsp-mode-map
          ([remap xref-find-references] . lsp-ui-peek-find-references)
          ([remap imenu-list-smart-toggle] . lsp-ui-imenu)
          ([remap flycheck-list-errors] . lsp-ui-flycheck-list))
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-doc-include-signature t)
    (lsp-ui-peek-always-show t)
    :config
    (set-face-background 'lsp-ui-doc-background (face-background 'hl-line)))

  (use-package dap-mode
    :after (lsp-mode hydra)
    :hook
    (lsp-mode . (lambda () (dap-mode t) (dap-ui-mode t)))
    :config
    (use-package dap-hydra
      :ensure nil
      :bind
      (:map dap-mode-map
            ("C-c d" . dap-hydra))
      :config
      (defhydra+ dap-hydra (:exit nil :foreign-keys run)
        ("d" dap-debug "Start debug session"))))

  (use-package company-lsp
    :after
    (company lsp-mode)
    :custom
    (company-lsp-async t)
    (company-lsp-cache-candidates t)
    (company-lsp-enable-snippets nil)
    (company-lsp-enable-recompletion t))
#+END_SRC

*** C/C++

For now, use ccls, clangd may be a better option

Requires:
- [[https://clang.llvm.org/][clang]]
- [[https://lldb.llvm.org/][lldb]]
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :hook
    ((c-mode c++-mode) . lsp)
    :custom
    (c-default-style "linux")
    (c-basic-offset 4))

  (use-package dap-gdb-lldb
    :ensure nil
    :after dap-mode)

  (use-package company-c-headers
    :after company
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC

*** Clojure

Requires:
- [[https://leiningen.org/][Leiningen]]
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :hook
    (clojure-mode . aggressive-indent-mode))

  (use-package cider
    :bind
    (:map cider-repl-mode-map
          ("C-l" . cider-repl-clear-buffer))
    :custom
    (cider-print-fn 'fipp)
    (cider-repl-display-help-banner nil)
    (cider-repl-pop-to-buffer-on-connect nil)
    (cider-repl-display-in-current-window nil)
    (cider-font-lock-dynamically t))

  (use-package elein)
#+END_SRC

*** Common Lisp

Requires:
- [[http://www.sbcl.org/][sbcl]]
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :hook
    (slime-lisp-mode . aggressive-indent-mode)
    :bind
    (:map slime-repl-mode-map
          ("C-l" . slime-repl-clear-buffer))
    :custom
    (inferior-lisp-program "sbcl")
    (slime-contribs '(slime-fancy)))
#+END_SRC

*** Jupyter

Requires:
- [[https://www.python.org/][Python3]]
- [[https://jupyter.org/][Jupyter]]
#+BEGIN_SRC emacs-lisp
  (use-package ein
    :mode
    (".*\\.ipynb\\'" . ein:ipynb-mode)
    :custom
    (ein:completion-backend 'ein:use-company-jedi-backends)
    (ein:use-auto-complete-superpack t))
#+END_SRC

*** OCaml

Requires
- [[https://ocaml.org/][ocaml]]
- [[https://github.com/ocaml/merlin][ocamlmerlin]]
#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :hook
  (tuareg-mode . lsp)
  :mode
  (("\\.ml[ip]?\\'" . tuareg-mode)
   ("\\.mly\\'" . tuareg-menhir-mode)
   ("[./]opam_?\\'" . tuareg-opam-mode)
   ("\\(?:\\`\\|/\\)jbuild\\(?:\\.inc\\)?\\'" . tuareg-jbuild-mode)
   ("\\.eliomi?\\'" . tuareg-mode))
  :custom
  (tuareg-match-patterns-aligned t)
  (tuareg-indent-align-with-first-arg t))
#+END_SRC

*** Python

Requires:
- [[https://www.python.org/][Python3]]
- [[https://github.com/palantir/python-language-server][pyls]]
#+BEGIN_SRC emacs-lisp
  (use-package pip-requirements
    :mode
    ("requirements\\.txt" . pip-requirements-mode))

  (use-package python
    :ensure nil
    :after lsp-mode
    :custom
    (python-indent 4)
    (python-shell-interpreter ign/python-executable)
    ;; Required for MacOS, prevents newlines from being displayed as ^G
    (python-shell-interpreter-args (if (eq ign/os 'macos) "-c exec('__import__(\\'readline\\')') -i" "-i"))
    (python-fill-docstring-style 'pep-257)
    (py-split-window-on-execute t))

  (use-package elpy
    :after (python lsp-mode lsp-pyls)
    :hook
    (python-mode . elpy-mode)
    :bind
    (:map python-mode-map
          ([remap lsp-rename] . elpy-multiedit-python-symbol-at-point)
          ([remap lsp-format-buffer] . elpy-format-code))
    :custom
    (elpy-modules nil)
    (elpy-rpc-python-command ign/python-executable))

  (use-package sphinx-doc
    :after python
    :hook (python-mode . sphinx-doc))

  (use-package lsp-pyls
    :ensure nil
    :after lsp-mode
    :hook
    (python-mode . lsp)
    :custom
    (lsp-pyls-plugins-mccabe-enabled nil)
    (lsp-pyls-plugins-pycodestyle-enabled nil)
    (lsp-pyls-plugins-pydocstyle-enabled t)
    (lsp-pyls-plugins-pyflakes-enabled t))

  (use-package dap-python
    :ensure nil
    :after (lsp-pyls dap-mode)
    :custom
    (dap-python-executable ign/python-executable))
#+END_SRC

*** R & Julia

Requires:
- [[https://julialang.org/][Julia]]
- [[https://www.r-project.org/][R]]
#+BEGIN_SRC emacs-lisp
  (use-package ess)
#+END_SRC

* Writing/Documentation
** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :mode
    ("\\.org\\'" . org-mode)
    :hook
    (org-babel-after-execute . org-redisplay-inline-images)
    :custom
    (org-image-actual-width 480)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-pretty-entities t)
    (org-hide-emphasis-markers t)
    (org-startup-with-inline-images t)
    (org-babel-python-command "python3 -i")
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
    :config
    (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ocaml . t)
       (gnuplot . t))))

  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))

  (use-package org-bullets
    :after org
    :hook
    (org-mode . org-bullets-mode))

  (use-package px)
#+END_SRC

* Community
** Browser

#+BEGIN_SRC emacs-lisp
  (setq-default browse-url-generic-program "chrome")
  (setq-default browse-url-browser-function 'browse-url-chromium)
#+END_SRC

** Discord

#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :if (executable-find "discord")
    :custom
    (elcord-use-major-mode-as-main-icon t)
    :config
    (elcord-mode t))
#+END_SRC

** Key Frequency

#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode t))
#+END_SRC
